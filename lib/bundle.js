(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/home/zed/externals/lodash.js":[function(require,module,exports){
(function (global){
"use strict";;(function(){var undefined;var arrayPool=[], objectPool=[];var idCounter=0;var keyPrefix=+new Date() + "";var largeArraySize=75;var maxPoolSize=40;var whitespace=" \t\u000b\f ﻿" + "\n\r\u2028\u2029" + " ᠎             　";var reEmptyStringLeading=/\b__p \+= '';/g, reEmptyStringMiddle=/\b(__p \+=) '' \+/g, reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g;var reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;var reFlags=/\w*$/;var reFuncName=/^\s*function[ \n\r\t]+\w/;var reInterpolate=/<%=([\s\S]+?)%>/g;var reLeadingSpacesAndZeros=RegExp("^[" + whitespace + "]*0+(?=.$)");var reNoMatch=/($^)/;var reThis=/\bthis\b/;var reUnescapedString=/['\n\r\t\u2028\u2029\\]/g;var contextProps=["Array", "Boolean", "Date", "Function", "Math", "Number", "Object", "RegExp", "String", "_", "attachEvent", "clearTimeout", "isFinite", "isNaN", "parseInt", "setTimeout"];var templateCounter=0;var argsClass="[object Arguments]", arrayClass="[object Array]", boolClass="[object Boolean]", dateClass="[object Date]", funcClass="[object Function]", numberClass="[object Number]", objectClass="[object Object]", regexpClass="[object RegExp]", stringClass="[object String]";var cloneableClasses={};cloneableClasses[funcClass] = false;cloneableClasses[argsClass] = cloneableClasses[arrayClass] = cloneableClasses[boolClass] = cloneableClasses[dateClass] = cloneableClasses[numberClass] = cloneableClasses[objectClass] = cloneableClasses[regexpClass] = cloneableClasses[stringClass] = true;var debounceOptions={leading:false, maxWait:0, trailing:false};var descriptor={configurable:false, enumerable:false, value:null, writable:false};var objectTypes={boolean:false, "function":true, object:true, number:false, string:false, undefined:false};var stringEscapes={"\\":"\\", "'":"'", "\n":"n", "\r":"r", "\t":"t", "\u2028":"u2028", "\u2029":"u2029"};var root=objectTypes[typeof window] && window || this;var freeExports=objectTypes[typeof exports] && exports && !exports.nodeType && exports;var freeModule=objectTypes[typeof module] && module && !module.nodeType && module;var moduleExports=freeModule && freeModule.exports === freeExports && freeExports;var freeGlobal=objectTypes[typeof global] && global;if(freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)){root = freeGlobal;}function baseIndexOf(array, value, fromIndex){var index=(fromIndex || 0) - 1, length=array?array.length:0;while(++index < length) {if(array[index] === value){return index;}}return -1;}function cacheIndexOf(cache, value){var type=typeof value;cache = cache.cache;if(type == "boolean" || value == null){return cache[value]?0:-1;}if(type != "number" && type != "string"){type = "object";}var key=type == "number"?value:keyPrefix + value;cache = (cache = cache[type]) && cache[key];return type == "object"?cache && baseIndexOf(cache, value) > -1?0:-1:cache?0:-1;}function cachePush(value){var cache=this.cache, type=typeof value;if(type == "boolean" || value == null){cache[value] = true;}else {if(type != "number" && type != "string"){type = "object";}var key=type == "number"?value:keyPrefix + value, typeCache=cache[type] || (cache[type] = {});if(type == "object"){(typeCache[key] || (typeCache[key] = [])).push(value);}else {typeCache[key] = true;}}}function charAtCallback(value){return value.charCodeAt(0);}function compareAscending(a, b){var ac=a.criteria, bc=b.criteria, index=-1, length=ac.length;while(++index < length) {var value=ac[index], other=bc[index];if(value !== other){if(value > other || typeof value == "undefined"){return 1;}if(value < other || typeof other == "undefined"){return -1;}}}return a.index - b.index;}function createCache(array){var index=-1, length=array.length, first=array[0], mid=array[length / 2 | 0], last=array[length - 1];if(first && typeof first == "object" && mid && typeof mid == "object" && last && typeof last == "object"){return false;}var cache=getObject();cache["false"] = cache["null"] = cache["true"] = cache.undefined = false;var result=getObject();result.array = array;result.cache = cache;result.push = cachePush;while(++index < length) {result.push(array[index]);}return result;}function escapeStringChar(match){return "\\" + stringEscapes[match];}function getArray(){return arrayPool.pop() || [];}function getObject(){return objectPool.pop() || {array:null, cache:null, criteria:null, "false":false, index:0, "null":false, number:null, object:null, push:null, string:null, "true":false, undefined:false, value:null};}function releaseArray(array){array.length = 0;if(arrayPool.length < maxPoolSize){arrayPool.push(array);}}function releaseObject(object){var cache=object.cache;if(cache){releaseObject(cache);}object.array = object.cache = object.criteria = object.object = object.number = object.string = object.value = null;if(objectPool.length < maxPoolSize){objectPool.push(object);}}function slice(array, start, end){start || (start = 0);if(typeof end == "undefined"){end = array?array.length:0;}var index=-1, length=end - start || 0, result=Array(length < 0?0:length);while(++index < length) {result[index] = array[start + index];}return result;}function runInContext(context){context = context?_.defaults(root.Object(), context, _.pick(root, contextProps)):root;var Array=context.Array, Boolean=context.Boolean, Date=context.Date, Function=context.Function, Math=context.Math, Number=context.Number, Object=context.Object, RegExp=context.RegExp, String=context.String, TypeError=context.TypeError;var arrayRef=[];var objectProto=Object.prototype;var oldDash=context._;var toString=objectProto.toString;var reNative=RegExp("^" + String(toString).replace(/[.*+?^${}()|[\]\\]/g, "\\$&").replace(/toString| for [^\]]+/g, ".*?") + "$");var ceil=Math.ceil, clearTimeout=context.clearTimeout, floor=Math.floor, fnToString=Function.prototype.toString, getPrototypeOf=isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf, hasOwnProperty=objectProto.hasOwnProperty, push=arrayRef.push, setTimeout=context.setTimeout, splice=arrayRef.splice, unshift=arrayRef.unshift;var defineProperty=(function(){try{var o={}, func=isNative(func = Object.defineProperty) && func, result=func(o, o, o) && func;}catch(e) {}return result;})();var nativeCreate=isNative(nativeCreate = Object.create) && nativeCreate, nativeIsArray=isNative(nativeIsArray = Array.isArray) && nativeIsArray, nativeIsFinite=context.isFinite, nativeIsNaN=context.isNaN, nativeKeys=isNative(nativeKeys = Object.keys) && nativeKeys, nativeMax=Math.max, nativeMin=Math.min, nativeParseInt=context.parseInt, nativeRandom=Math.random;var ctorByClass={};ctorByClass[arrayClass] = Array;ctorByClass[boolClass] = Boolean;ctorByClass[dateClass] = Date;ctorByClass[funcClass] = Function;ctorByClass[objectClass] = Object;ctorByClass[numberClass] = Number;ctorByClass[regexpClass] = RegExp;ctorByClass[stringClass] = String;function lodash(value){return value && typeof value == "object" && !isArray(value) && hasOwnProperty.call(value, "__wrapped__")?value:new lodashWrapper(value);}function lodashWrapper(value, chainAll){this.__chain__ = !!chainAll;this.__wrapped__ = value;}lodashWrapper.prototype = lodash.prototype;var support=lodash.support = {};support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);support.funcNames = typeof Function.name == "string";lodash.templateSettings = {escape:/<%-([\s\S]+?)%>/g, evaluate:/<%([\s\S]+?)%>/g, interpolate:reInterpolate, variable:"", imports:{_:lodash}};function baseBind(bindData){var func=bindData[0], partialArgs=bindData[2], thisArg=bindData[4];function bound(){if(partialArgs){var args=slice(partialArgs);push.apply(args, arguments);}if(this instanceof bound){var thisBinding=baseCreate(func.prototype), result=func.apply(thisBinding, args || arguments);return isObject(result)?result:thisBinding;}return func.apply(thisArg, args || arguments);}setBindData(bound, bindData);return bound;}function baseClone(value, isDeep, callback, stackA, stackB){if(callback){var result=callback(value);if(typeof result != "undefined"){return result;}}var isObj=isObject(value);if(isObj){var className=toString.call(value);if(!cloneableClasses[className]){return value;}var ctor=ctorByClass[className];switch(className){case boolClass:case dateClass:return new ctor(+value);case numberClass:case stringClass:return new ctor(value);case regexpClass:result = ctor(value.source, reFlags.exec(value));result.lastIndex = value.lastIndex;return result;}}else {return value;}var isArr=isArray(value);if(isDeep){var initedStack=!stackA;stackA || (stackA = getArray());stackB || (stackB = getArray());var length=stackA.length;while(length--) {if(stackA[length] == value){return stackB[length];}}result = isArr?ctor(value.length):{};}else {result = isArr?slice(value):assign({}, value);}if(isArr){if(hasOwnProperty.call(value, "index")){result.index = value.index;}if(hasOwnProperty.call(value, "input")){result.input = value.input;}}if(!isDeep){return result;}stackA.push(value);stackB.push(result);(isArr?forEach:forOwn)(value, function(objValue, key){result[key] = baseClone(objValue, isDeep, callback, stackA, stackB);});if(initedStack){releaseArray(stackA);releaseArray(stackB);}return result;}function baseCreate(prototype, properties){return isObject(prototype)?nativeCreate(prototype):{};}if(!nativeCreate){baseCreate = (function(){function Object(){}return function(prototype){if(isObject(prototype)){Object.prototype = prototype;var result=new Object();Object.prototype = null;}return result || context.Object();};})();}function baseCreateCallback(func, thisArg, argCount){if(typeof func != "function"){return identity;}if(typeof thisArg == "undefined" || !("prototype" in func)){return func;}var bindData=func.__bindData__;if(typeof bindData == "undefined"){if(support.funcNames){bindData = !func.name;}bindData = bindData || !support.funcDecomp;if(!bindData){var source=fnToString.call(func);if(!support.funcNames){bindData = !reFuncName.test(source);}if(!bindData){bindData = reThis.test(source);setBindData(func, bindData);}}}if(bindData === false || bindData !== true && bindData[1] & 1){return func;}switch(argCount){case 1:return function(value){return func.call(thisArg, value);};case 2:return function(a, b){return func.call(thisArg, a, b);};case 3:return function(value, index, collection){return func.call(thisArg, value, index, collection);};case 4:return function(accumulator, value, index, collection){return func.call(thisArg, accumulator, value, index, collection);};}return bind(func, thisArg);}function baseCreateWrapper(bindData){var func=bindData[0], bitmask=bindData[1], partialArgs=bindData[2], partialRightArgs=bindData[3], thisArg=bindData[4], arity=bindData[5];var isBind=bitmask & 1, isBindKey=bitmask & 2, isCurry=bitmask & 4, isCurryBound=bitmask & 8, key=func;function bound(){var thisBinding=isBind?thisArg:this;if(partialArgs){var args=slice(partialArgs);push.apply(args, arguments);}if(partialRightArgs || isCurry){args || (args = slice(arguments));if(partialRightArgs){push.apply(args, partialRightArgs);}if(isCurry && args.length < arity){bitmask |= 16 & ~32;return baseCreateWrapper([func, isCurryBound?bitmask:bitmask & ~3, args, null, thisArg, arity]);}}args || (args = arguments);if(isBindKey){func = thisBinding[key];}if(this instanceof bound){thisBinding = baseCreate(func.prototype);var result=func.apply(thisBinding, args);return isObject(result)?result:thisBinding;}return func.apply(thisBinding, args);}setBindData(bound, bindData);return bound;}function baseDifference(array, values){var index=-1, indexOf=getIndexOf(), length=array?array.length:0, isLarge=length >= largeArraySize && indexOf === baseIndexOf, result=[];if(isLarge){var cache=createCache(values);if(cache){indexOf = cacheIndexOf;values = cache;}else {isLarge = false;}}while(++index < length) {var value=array[index];if(indexOf(values, value) < 0){result.push(value);}}if(isLarge){releaseObject(values);}return result;}function baseFlatten(array, isShallow, isStrict, fromIndex){var index=(fromIndex || 0) - 1, length=array?array.length:0, result=[];while(++index < length) {var value=array[index];if(value && typeof value == "object" && typeof value.length == "number" && (isArray(value) || isArguments(value))){if(!isShallow){value = baseFlatten(value, isShallow, isStrict);}var valIndex=-1, valLength=value.length, resIndex=result.length;result.length += valLength;while(++valIndex < valLength) {result[resIndex++] = value[valIndex];}}else if(!isStrict){result.push(value);}}return result;}function baseIsEqual(_x, _x2, _x3, _x4, _x5, _x6){var _again=true;_function: while(_again) {_again = false;var a=_x, b=_x2, callback=_x3, isWhere=_x4, stackA=_x5, stackB=_x6;result = type = otherType = className = otherClass = isArr = aWrapped = bWrapped = ctorA = ctorB = initedStack = length = size = index = value = undefined;if(callback){var result=callback(a, b);if(typeof result != "undefined"){return !!result;}}if(a === b){return a !== 0 || 1 / a == 1 / b;}var type=typeof a, otherType=typeof b;if(a === a && !(a && objectTypes[type]) && !(b && objectTypes[otherType])){return false;}if(a == null || b == null){return a === b;}var className=toString.call(a), otherClass=toString.call(b);if(className == argsClass){className = objectClass;}if(otherClass == argsClass){otherClass = objectClass;}if(className != otherClass){return false;}switch(className){case boolClass:case dateClass:return +a == +b;case numberClass:return a != +a?b != +b:a == 0?1 / a == 1 / b:a == +b;case regexpClass:case stringClass:return a == String(b);}var isArr=className == arrayClass;if(!isArr){var aWrapped=hasOwnProperty.call(a, "__wrapped__"), bWrapped=hasOwnProperty.call(b, "__wrapped__");if(aWrapped || bWrapped){_x = aWrapped?a.__wrapped__:a;_x2 = bWrapped?b.__wrapped__:b;_x3 = callback;_x4 = isWhere;_x5 = stackA;_x6 = stackB;_again = true;continue _function;}if(className != objectClass){return false;}var ctorA=a.constructor, ctorB=b.constructor;if(ctorA != ctorB && !(isFunction(ctorA) && ctorA instanceof ctorA && isFunction(ctorB) && ctorB instanceof ctorB) && ("constructor" in a && "constructor" in b)){return false;}}var initedStack=!stackA;stackA || (stackA = getArray());stackB || (stackB = getArray());var length=stackA.length;while(length--) {if(stackA[length] == a){return stackB[length] == b;}}var size=0;result = true;stackA.push(a);stackB.push(b);if(isArr){length = a.length;size = b.length;result = size == length;if(result || isWhere){while(size--) {var index=length, value=b[size];if(isWhere){while(index--) {if(result = baseIsEqual(a[index], value, callback, isWhere, stackA, stackB)){break;}}}else if(!(result = baseIsEqual(a[size], value, callback, isWhere, stackA, stackB))){break;}}}}else {forIn(b, function(value, key, b){if(hasOwnProperty.call(b, key)){size++;return result = hasOwnProperty.call(a, key) && baseIsEqual(a[key], value, callback, isWhere, stackA, stackB);}});if(result && !isWhere){forIn(a, function(value, key, a){if(hasOwnProperty.call(a, key)){return result = --size > -1;}});}}stackA.pop();stackB.pop();if(initedStack){releaseArray(stackA);releaseArray(stackB);}return result;}}function baseMerge(object, source, callback, stackA, stackB){(isArray(source)?forEach:forOwn)(source, function(source, key){var found, isArr, result=source, value=object[key];if(source && ((isArr = isArray(source)) || isPlainObject(source))){var stackLength=stackA.length;while(stackLength--) {if(found = stackA[stackLength] == source){value = stackB[stackLength];break;}}if(!found){var isShallow;if(callback){result = callback(value, source);if(isShallow = typeof result != "undefined"){value = result;}}if(!isShallow){value = isArr?isArray(value)?value:[]:isPlainObject(value)?value:{};}stackA.push(source);stackB.push(value);if(!isShallow){baseMerge(value, source, callback, stackA, stackB);}}}else {if(callback){result = callback(value, source);if(typeof result == "undefined"){result = source;}}if(typeof result != "undefined"){value = result;}}object[key] = value;});}function baseRandom(min, max){return min + floor(nativeRandom() * (max - min + 1));}function baseUniq(array, isSorted, callback){var index=-1, indexOf=getIndexOf(), length=array?array.length:0, result=[];var isLarge=!isSorted && length >= largeArraySize && indexOf === baseIndexOf, seen=callback || isLarge?getArray():result;if(isLarge){var cache=createCache(seen);indexOf = cacheIndexOf;seen = cache;}while(++index < length) {var value=array[index], computed=callback?callback(value, index, array):value;if(isSorted?!index || seen[seen.length - 1] !== computed:indexOf(seen, computed) < 0){if(callback || isLarge){seen.push(computed);}result.push(value);}}if(isLarge){releaseArray(seen.array);releaseObject(seen);}else if(callback){releaseArray(seen);}return result;}function createAggregator(setter){return function(collection, callback, thisArg){var result={};callback = lodash.createCallback(callback, thisArg, 3);var index=-1, length=collection?collection.length:0;if(typeof length == "number"){while(++index < length) {var value=collection[index];setter(result, value, callback(value, index, collection), collection);}}else {forOwn(collection, function(value, key, collection){setter(result, value, callback(value, key, collection), collection);});}return result;};}function createWrapper(_x, _x2, _x3, _x4, _x5, _x6){var _arguments;var _again=true;_function: while(_again) {_again = false;var func=_x, bitmask=_x2, partialArgs=_x3, partialRightArgs=_x4, thisArg=_x5, arity=_x6;isBind = isBindKey = isCurry = isCurryBound = isPartial = isPartialRight = bindData = creater = undefined;var isBind=bitmask & 1, isBindKey=bitmask & 2, isCurry=bitmask & 4, isCurryBound=bitmask & 8, isPartial=bitmask & 16, isPartialRight=bitmask & 32;if(!isBindKey && !isFunction(func)){throw new TypeError();}if(isPartial && !partialArgs.length){bitmask &= ~16;isPartial = partialArgs = false;}if(isPartialRight && !partialRightArgs.length){bitmask &= ~32;isPartialRight = partialRightArgs = false;}var bindData=func && func.__bindData__;if(bindData && bindData !== true){bindData = slice(bindData);if(bindData[2]){bindData[2] = slice(bindData[2]);}if(bindData[3]){bindData[3] = slice(bindData[3]);}if(isBind && !(bindData[1] & 1)){bindData[4] = thisArg;}if(!isBind && bindData[1] & 1){bitmask |= 8;}if(isCurry && !(bindData[1] & 4)){bindData[5] = arity;}if(isPartial){push.apply(bindData[2] || (bindData[2] = []), partialArgs);}if(isPartialRight){unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);}bindData[1] |= bitmask;_arguments = bindData;_x = _arguments[0];_x2 = _arguments[1];_x3 = _arguments[2];_x4 = _arguments[3];_x5 = _arguments[4];_x6 = _arguments[5];_again = true;continue _function;}var creater=bitmask == 1 || bitmask === 17?baseBind:baseCreateWrapper;return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);}}function escapeHtmlChar(match){return htmlEscapes[match];}function getIndexOf(){var result=(result = lodash.indexOf) === indexOf?baseIndexOf:result;return result;}function isNative(value){return typeof value == "function" && reNative.test(value);}var setBindData=!defineProperty?noop:function(func, value){descriptor.value = value;defineProperty(func, "__bindData__", descriptor);};function shimIsPlainObject(value){var ctor, result;if(!(value && toString.call(value) == objectClass) || (ctor = value.constructor, isFunction(ctor) && !(ctor instanceof ctor))){return false;}forIn(value, function(value, key){result = key;});return typeof result == "undefined" || hasOwnProperty.call(value, result);}function unescapeHtmlChar(match){return htmlUnescapes[match];}function isArguments(value){return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == argsClass || false;}var isArray=nativeIsArray || function(value){return value && typeof value == "object" && typeof value.length == "number" && toString.call(value) == arrayClass || false;};var shimKeys=function shimKeys(object){var index, iterable=object, result=[];if(!iterable){return result;}if(!objectTypes[typeof object]){return result;}for(index in iterable) {if(hasOwnProperty.call(iterable, index)){result.push(index);}}return result;};var keys=!nativeKeys?shimKeys:function(object){if(!isObject(object)){return [];}return nativeKeys(object);};var htmlEscapes={"&":"&amp;", "<":"&lt;", ">":"&gt;", "\"":"&quot;", "'":"&#39;"};var htmlUnescapes=invert(htmlEscapes);var reEscapedHtml=RegExp("(" + keys(htmlUnescapes).join("|") + ")", "g"), reUnescapedHtml=RegExp("[" + keys(htmlEscapes).join("") + "]", "g");var assign=function assign(object, source, guard){var index, iterable=object, result=iterable;if(!iterable){return result;}var args=arguments, argsIndex=0, argsLength=typeof guard == "number"?2:args.length;if(argsLength > 3 && typeof args[argsLength - 2] == "function"){var callback=baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);}else if(argsLength > 2 && typeof args[argsLength - 1] == "function"){callback = args[--argsLength];}while(++argsIndex < argsLength) {iterable = args[argsIndex];if(iterable && objectTypes[typeof iterable]){var ownIndex=-1, ownProps=objectTypes[typeof iterable] && keys(iterable), length=ownProps?ownProps.length:0;while(++ownIndex < length) {index = ownProps[ownIndex];result[index] = callback?callback(result[index], iterable[index]):iterable[index];}}}return result;};function clone(value, isDeep, callback, thisArg){if(typeof isDeep != "boolean" && isDeep != null){thisArg = callback;callback = isDeep;isDeep = false;}return baseClone(value, isDeep, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1));}function cloneDeep(value, callback, thisArg){return baseClone(value, true, typeof callback == "function" && baseCreateCallback(callback, thisArg, 1));}function create(prototype, properties){var result=baseCreate(prototype);return properties?assign(result, properties):result;}var defaults=function defaults(object, source, guard){var index, iterable=object, result=iterable;if(!iterable){return result;}var args=arguments, argsIndex=0, argsLength=typeof guard == "number"?2:args.length;while(++argsIndex < argsLength) {iterable = args[argsIndex];if(iterable && objectTypes[typeof iterable]){var ownIndex=-1, ownProps=objectTypes[typeof iterable] && keys(iterable), length=ownProps?ownProps.length:0;while(++ownIndex < length) {index = ownProps[ownIndex];if(typeof result[index] == "undefined")result[index] = iterable[index];}}}return result;};function findKey(object, callback, thisArg){var result;callback = lodash.createCallback(callback, thisArg, 3);forOwn(object, function(value, key, object){if(callback(value, key, object)){result = key;return false;}});return result;}function findLastKey(object, callback, thisArg){var result;callback = lodash.createCallback(callback, thisArg, 3);forOwnRight(object, function(value, key, object){if(callback(value, key, object)){result = key;return false;}});return result;}var forIn=function forIn(collection, callback, thisArg){var index, iterable=collection, result=iterable;if(!iterable){return result;}if(!objectTypes[typeof iterable]){return result;}callback = callback && typeof thisArg == "undefined"?callback:baseCreateCallback(callback, thisArg, 3);for(index in iterable) {if(callback(iterable[index], index, collection) === false){return result;}}return result;};function forInRight(object, callback, thisArg){var pairs=[];forIn(object, function(value, key){pairs.push(key, value);});var length=pairs.length;callback = baseCreateCallback(callback, thisArg, 3);while(length--) {if(callback(pairs[length--], pairs[length], object) === false){break;}}return object;}var forOwn=function forOwn(collection, callback, thisArg){var index, iterable=collection, result=iterable;if(!iterable){return result;}if(!objectTypes[typeof iterable]){return result;}callback = callback && typeof thisArg == "undefined"?callback:baseCreateCallback(callback, thisArg, 3);var ownIndex=-1, ownProps=objectTypes[typeof iterable] && keys(iterable), length=ownProps?ownProps.length:0;while(++ownIndex < length) {index = ownProps[ownIndex];if(callback(iterable[index], index, collection) === false){return result;}}return result;};function forOwnRight(object, callback, thisArg){var props=keys(object), length=props.length;callback = baseCreateCallback(callback, thisArg, 3);while(length--) {var key=props[length];if(callback(object[key], key, object) === false){break;}}return object;}function functions(object){var result=[];forIn(object, function(value, key){if(isFunction(value)){result.push(key);}});return result.sort();}function has(object, key){return object?hasOwnProperty.call(object, key):false;}function invert(object){var index=-1, props=keys(object), length=props.length, result={};while(++index < length) {var key=props[index];result[object[key]] = key;}return result;}function isBoolean(value){return value === true || value === false || value && typeof value == "object" && toString.call(value) == boolClass || false;}function isDate(value){return value && typeof value == "object" && toString.call(value) == dateClass || false;}function isElement(value){return value && value.nodeType === 1 || false;}function isEmpty(value){var result=true;if(!value){return result;}var className=toString.call(value), length=value.length;if(className == arrayClass || className == stringClass || className == argsClass || className == objectClass && typeof length == "number" && isFunction(value.splice)){return !length;}forOwn(value, function(){return result = false;});return result;}function isEqual(a, b, callback, thisArg){return baseIsEqual(a, b, typeof callback == "function" && baseCreateCallback(callback, thisArg, 2));}function isFinite(value){return nativeIsFinite(value) && !nativeIsNaN(parseFloat(value));}function isFunction(value){return typeof value == "function";}function isObject(value){return !!(value && objectTypes[typeof value]);}function isNaN(value){return isNumber(value) && value != +value;}function isNull(value){return value === null;}function isNumber(value){return typeof value == "number" || value && typeof value == "object" && toString.call(value) == numberClass || false;}var isPlainObject=!getPrototypeOf?shimIsPlainObject:function(value){if(!(value && toString.call(value) == objectClass)){return false;}var valueOf=value.valueOf, objProto=isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);return objProto?value == objProto || getPrototypeOf(value) == objProto:shimIsPlainObject(value);};function isRegExp(value){return value && typeof value == "object" && toString.call(value) == regexpClass || false;}function isString(value){return typeof value == "string" || value && typeof value == "object" && toString.call(value) == stringClass || false;}function isUndefined(value){return typeof value == "undefined";}function mapValues(object, callback, thisArg){var result={};callback = lodash.createCallback(callback, thisArg, 3);forOwn(object, function(value, key, object){result[key] = callback(value, key, object);});return result;}function merge(object){var args=arguments, length=2;if(!isObject(object)){return object;}if(typeof args[2] != "number"){length = args.length;}if(length > 3 && typeof args[length - 2] == "function"){var callback=baseCreateCallback(args[--length - 1], args[length--], 2);}else if(length > 2 && typeof args[length - 1] == "function"){callback = args[--length];}var sources=slice(arguments, 1, length), index=-1, stackA=getArray(), stackB=getArray();while(++index < length) {baseMerge(object, sources[index], callback, stackA, stackB);}releaseArray(stackA);releaseArray(stackB);return object;}function omit(object, callback, thisArg){var result={};if(typeof callback != "function"){var props=[];forIn(object, function(value, key){props.push(key);});props = baseDifference(props, baseFlatten(arguments, true, false, 1));var index=-1, length=props.length;while(++index < length) {var key=props[index];result[key] = object[key];}}else {callback = lodash.createCallback(callback, thisArg, 3);forIn(object, function(value, key, object){if(!callback(value, key, object)){result[key] = value;}});}return result;}function pairs(object){var index=-1, props=keys(object), length=props.length, result=Array(length);while(++index < length) {var key=props[index];result[index] = [key, object[key]];}return result;}function pick(object, callback, thisArg){var result={};if(typeof callback != "function"){var index=-1, props=baseFlatten(arguments, true, false, 1), length=isObject(object)?props.length:0;while(++index < length) {var key=props[index];if(key in object){result[key] = object[key];}}}else {callback = lodash.createCallback(callback, thisArg, 3);forIn(object, function(value, key, object){if(callback(value, key, object)){result[key] = value;}});}return result;}function transform(object, callback, accumulator, thisArg){var isArr=isArray(object);if(accumulator == null){if(isArr){accumulator = [];}else {var ctor=object && object.constructor, proto=ctor && ctor.prototype;accumulator = baseCreate(proto);}}if(callback){callback = lodash.createCallback(callback, thisArg, 4);(isArr?forEach:forOwn)(object, function(value, index, object){return callback(accumulator, value, index, object);});}return accumulator;}function values(object){var index=-1, props=keys(object), length=props.length, result=Array(length);while(++index < length) {result[index] = object[props[index]];}return result;}function at(collection){var args=arguments, index=-1, props=baseFlatten(args, true, false, 1), length=args[2] && args[2][args[1]] === collection?1:props.length, result=Array(length);while(++index < length) {result[index] = collection[props[index]];}return result;}function contains(collection, target, fromIndex){var index=-1, indexOf=getIndexOf(), length=collection?collection.length:0, result=false;fromIndex = (fromIndex < 0?nativeMax(0, length + fromIndex):fromIndex) || 0;if(isArray(collection)){result = indexOf(collection, target, fromIndex) > -1;}else if(typeof length == "number"){result = (isString(collection)?collection.indexOf(target, fromIndex):indexOf(collection, target, fromIndex)) > -1;}else {forOwn(collection, function(value){if(++index >= fromIndex){return !(result = value === target);}});}return result;}var countBy=createAggregator(function(result, value, key){hasOwnProperty.call(result, key)?result[key]++:result[key] = 1;});function every(collection, callback, thisArg){var result=true;callback = lodash.createCallback(callback, thisArg, 3);var index=-1, length=collection?collection.length:0;if(typeof length == "number"){while(++index < length) {if(!(result = !!callback(collection[index], index, collection))){break;}}}else {forOwn(collection, function(value, index, collection){return result = !!callback(value, index, collection);});}return result;}function filter(collection, callback, thisArg){var result=[];callback = lodash.createCallback(callback, thisArg, 3);var index=-1, length=collection?collection.length:0;if(typeof length == "number"){while(++index < length) {var value=collection[index];if(callback(value, index, collection)){result.push(value);}}}else {forOwn(collection, function(value, index, collection){if(callback(value, index, collection)){result.push(value);}});}return result;}function find(collection, callback, thisArg){callback = lodash.createCallback(callback, thisArg, 3);var index=-1, length=collection?collection.length:0;if(typeof length == "number"){while(++index < length) {var value=collection[index];if(callback(value, index, collection)){return value;}}}else {var result;forOwn(collection, function(value, index, collection){if(callback(value, index, collection)){result = value;return false;}});return result;}}function findLast(collection, callback, thisArg){var result;callback = lodash.createCallback(callback, thisArg, 3);forEachRight(collection, function(value, index, collection){if(callback(value, index, collection)){result = value;return false;}});return result;}function forEach(collection, callback, thisArg){var index=-1, length=collection?collection.length:0;callback = callback && typeof thisArg == "undefined"?callback:baseCreateCallback(callback, thisArg, 3);if(typeof length == "number"){while(++index < length) {if(callback(collection[index], index, collection) === false){break;}}}else {forOwn(collection, callback);}return collection;}function forEachRight(collection, callback, thisArg){var length=collection?collection.length:0;callback = callback && typeof thisArg == "undefined"?callback:baseCreateCallback(callback, thisArg, 3);if(typeof length == "number"){while(length--) {if(callback(collection[length], length, collection) === false){break;}}}else {var props=keys(collection);length = props.length;forOwn(collection, function(value, key, collection){key = props?props[--length]:--length;return callback(collection[key], key, collection);});}return collection;}var groupBy=createAggregator(function(result, value, key){(hasOwnProperty.call(result, key)?result[key]:result[key] = []).push(value);});var indexBy=createAggregator(function(result, value, key){result[key] = value;});function invoke(collection, methodName){var args=slice(arguments, 2), index=-1, isFunc=typeof methodName == "function", length=collection?collection.length:0, result=Array(typeof length == "number"?length:0);forEach(collection, function(value){result[++index] = (isFunc?methodName:value[methodName]).apply(value, args);});return result;}function map(collection, callback, thisArg){var index=-1, length=collection?collection.length:0;callback = lodash.createCallback(callback, thisArg, 3);if(typeof length == "number"){var result=Array(length);while(++index < length) {result[index] = callback(collection[index], index, collection);}}else {result = [];forOwn(collection, function(value, key, collection){result[++index] = callback(value, key, collection);});}return result;}function max(collection, callback, thisArg){var computed=-Infinity, result=computed;if(typeof callback != "function" && thisArg && thisArg[callback] === collection){callback = null;}if(callback == null && isArray(collection)){var index=-1, length=collection.length;while(++index < length) {var value=collection[index];if(value > result){result = value;}}}else {callback = callback == null && isString(collection)?charAtCallback:lodash.createCallback(callback, thisArg, 3);forEach(collection, function(value, index, collection){var current=callback(value, index, collection);if(current > computed){computed = current;result = value;}});}return result;}function min(collection, callback, thisArg){var computed=Infinity, result=computed;if(typeof callback != "function" && thisArg && thisArg[callback] === collection){callback = null;}if(callback == null && isArray(collection)){var index=-1, length=collection.length;while(++index < length) {var value=collection[index];if(value < result){result = value;}}}else {callback = callback == null && isString(collection)?charAtCallback:lodash.createCallback(callback, thisArg, 3);forEach(collection, function(value, index, collection){var current=callback(value, index, collection);if(current < computed){computed = current;result = value;}});}return result;}var pluck=map;function reduce(collection, callback, accumulator, thisArg){if(!collection){return accumulator;}var noaccum=arguments.length < 3;callback = lodash.createCallback(callback, thisArg, 4);var index=-1, length=collection.length;if(typeof length == "number"){if(noaccum){accumulator = collection[++index];}while(++index < length) {accumulator = callback(accumulator, collection[index], index, collection);}}else {forOwn(collection, function(value, index, collection){accumulator = noaccum?(noaccum = false, value):callback(accumulator, value, index, collection);});}return accumulator;}function reduceRight(collection, callback, accumulator, thisArg){var noaccum=arguments.length < 3;callback = lodash.createCallback(callback, thisArg, 4);forEachRight(collection, function(value, index, collection){accumulator = noaccum?(noaccum = false, value):callback(accumulator, value, index, collection);});return accumulator;}function reject(collection, callback, thisArg){callback = lodash.createCallback(callback, thisArg, 3);return filter(collection, function(value, index, collection){return !callback(value, index, collection);});}function sample(collection, n, guard){if(collection && typeof collection.length != "number"){collection = values(collection);}if(n == null || guard){return collection?collection[baseRandom(0, collection.length - 1)]:undefined;}var result=shuffle(collection);result.length = nativeMin(nativeMax(0, n), result.length);return result;}function shuffle(collection){var index=-1, length=collection?collection.length:0, result=Array(typeof length == "number"?length:0);forEach(collection, function(value){var rand=baseRandom(0, ++index);result[index] = result[rand];result[rand] = value;});return result;}function size(collection){var length=collection?collection.length:0;return typeof length == "number"?length:keys(collection).length;}function some(collection, callback, thisArg){var result;callback = lodash.createCallback(callback, thisArg, 3);var index=-1, length=collection?collection.length:0;if(typeof length == "number"){while(++index < length) {if(result = callback(collection[index], index, collection)){break;}}}else {forOwn(collection, function(value, index, collection){return !(result = callback(value, index, collection));});}return !!result;}function sortBy(collection, callback, thisArg){var index=-1, isArr=isArray(callback), length=collection?collection.length:0, result=Array(typeof length == "number"?length:0);if(!isArr){callback = lodash.createCallback(callback, thisArg, 3);}forEach(collection, function(value, key, collection){var object=result[++index] = getObject();if(isArr){object.criteria = map(callback, function(key){return value[key];});}else {(object.criteria = getArray())[0] = callback(value, key, collection);}object.index = index;object.value = value;});length = result.length;result.sort(compareAscending);while(length--) {var object=result[length];result[length] = object.value;if(!isArr){releaseArray(object.criteria);}releaseObject(object);}return result;}function toArray(collection){if(collection && typeof collection.length == "number"){return slice(collection);}return values(collection);}var where=filter;function compact(array){var index=-1, length=array?array.length:0, result=[];while(++index < length) {var value=array[index];if(value){result.push(value);}}return result;}function difference(array){return baseDifference(array, baseFlatten(arguments, true, true, 1));}function findIndex(array, callback, thisArg){var index=-1, length=array?array.length:0;callback = lodash.createCallback(callback, thisArg, 3);while(++index < length) {if(callback(array[index], index, array)){return index;}}return -1;}function findLastIndex(array, callback, thisArg){var length=array?array.length:0;callback = lodash.createCallback(callback, thisArg, 3);while(length--) {if(callback(array[length], length, array)){return length;}}return -1;}function first(array, callback, thisArg){var n=0, length=array?array.length:0;if(typeof callback != "number" && callback != null){var index=-1;callback = lodash.createCallback(callback, thisArg, 3);while(++index < length && callback(array[index], index, array)) {n++;}}else {n = callback;if(n == null || thisArg){return array?array[0]:undefined;}}return slice(array, 0, nativeMin(nativeMax(0, n), length));}function flatten(array, isShallow, callback, thisArg){if(typeof isShallow != "boolean" && isShallow != null){thisArg = callback;callback = typeof isShallow != "function" && thisArg && thisArg[isShallow] === array?null:isShallow;isShallow = false;}if(callback != null){array = map(array, callback, thisArg);}return baseFlatten(array, isShallow);}function indexOf(array, value, fromIndex){if(typeof fromIndex == "number"){var length=array?array.length:0;fromIndex = fromIndex < 0?nativeMax(0, length + fromIndex):fromIndex || 0;}else if(fromIndex){var index=sortedIndex(array, value);return array[index] === value?index:-1;}return baseIndexOf(array, value, fromIndex);}function initial(array, callback, thisArg){var n=0, length=array?array.length:0;if(typeof callback != "number" && callback != null){var index=length;callback = lodash.createCallback(callback, thisArg, 3);while(index-- && callback(array[index], index, array)) {n++;}}else {n = callback == null || thisArg?1:callback || n;}return slice(array, 0, nativeMin(nativeMax(0, length - n), length));}function intersection(){var args=[], argsIndex=-1, argsLength=arguments.length, caches=getArray(), indexOf=getIndexOf(), trustIndexOf=indexOf === baseIndexOf, seen=getArray();while(++argsIndex < argsLength) {var value=arguments[argsIndex];if(isArray(value) || isArguments(value)){args.push(value);caches.push(trustIndexOf && value.length >= largeArraySize && createCache(argsIndex?args[argsIndex]:seen));}}var array=args[0], index=-1, length=array?array.length:0, result=[];outer: while(++index < length) {var cache=caches[0];value = array[index];if((cache?cacheIndexOf(cache, value):indexOf(seen, value)) < 0){argsIndex = argsLength;(cache || seen).push(value);while(--argsIndex) {cache = caches[argsIndex];if((cache?cacheIndexOf(cache, value):indexOf(args[argsIndex], value)) < 0){continue outer;}}result.push(value);}}while(argsLength--) {cache = caches[argsLength];if(cache){releaseObject(cache);}}releaseArray(caches);releaseArray(seen);return result;}function last(array, callback, thisArg){var n=0, length=array?array.length:0;if(typeof callback != "number" && callback != null){var index=length;callback = lodash.createCallback(callback, thisArg, 3);while(index-- && callback(array[index], index, array)) {n++;}}else {n = callback;if(n == null || thisArg){return array?array[length - 1]:undefined;}}return slice(array, nativeMax(0, length - n));}function lastIndexOf(array, value, fromIndex){var index=array?array.length:0;if(typeof fromIndex == "number"){index = (fromIndex < 0?nativeMax(0, index + fromIndex):nativeMin(fromIndex, index - 1)) + 1;}while(index--) {if(array[index] === value){return index;}}return -1;}function pull(array){var args=arguments, argsIndex=0, argsLength=args.length, length=array?array.length:0;while(++argsIndex < argsLength) {var index=-1, value=args[argsIndex];while(++index < length) {if(array[index] === value){splice.call(array, index--, 1);length--;}}}return array;}function range(start, end, step){start = +start || 0;step = typeof step == "number"?step:+step || 1;if(end == null){end = start;start = 0;}var index=-1, length=nativeMax(0, ceil((end - start) / (step || 1))), result=Array(length);while(++index < length) {result[index] = start;start += step;}return result;}function remove(array, callback, thisArg){var index=-1, length=array?array.length:0, result=[];callback = lodash.createCallback(callback, thisArg, 3);while(++index < length) {var value=array[index];if(callback(value, index, array)){result.push(value);splice.call(array, index--, 1);length--;}}return result;}function rest(array, callback, thisArg){if(typeof callback != "number" && callback != null){var n=0, index=-1, length=array?array.length:0;callback = lodash.createCallback(callback, thisArg, 3);while(++index < length && callback(array[index], index, array)) {n++;}}else {n = callback == null || thisArg?1:nativeMax(0, callback);}return slice(array, n);}function sortedIndex(array, value, callback, thisArg){var low=0, high=array?array.length:low;callback = callback?lodash.createCallback(callback, thisArg, 1):identity;value = callback(value);while(low < high) {var mid=low + high >>> 1;callback(array[mid]) < value?low = mid + 1:high = mid;}return low;}function union(){return baseUniq(baseFlatten(arguments, true, true));}function uniq(array, isSorted, callback, thisArg){if(typeof isSorted != "boolean" && isSorted != null){thisArg = callback;callback = typeof isSorted != "function" && thisArg && thisArg[isSorted] === array?null:isSorted;isSorted = false;}if(callback != null){callback = lodash.createCallback(callback, thisArg, 3);}return baseUniq(array, isSorted, callback);}function without(array){return baseDifference(array, slice(arguments, 1));}function xor(){var index=-1, length=arguments.length;while(++index < length) {var array=arguments[index];if(isArray(array) || isArguments(array)){var result=result?baseUniq(baseDifference(result, array).concat(baseDifference(array, result))):array;}}return result || [];}function zip(){var array=arguments.length > 1?arguments:arguments[0], index=-1, length=array?max(pluck(array, "length")):0, result=Array(length < 0?0:length);while(++index < length) {result[index] = pluck(array, index);}return result;}function zipObject(keys, values){var index=-1, length=keys?keys.length:0, result={};if(!values && length && !isArray(keys[0])){values = [];}while(++index < length) {var key=keys[index];if(values){result[key] = values[index];}else if(key){result[key[0]] = key[1];}}return result;}function after(n, func){if(!isFunction(func)){throw new TypeError();}return function(){if(--n < 1){return func.apply(this, arguments);}};}function bind(func, thisArg){return arguments.length > 2?createWrapper(func, 17, slice(arguments, 2), null, thisArg):createWrapper(func, 1, null, null, thisArg);}function bindAll(object){var funcs=arguments.length > 1?baseFlatten(arguments, true, false, 1):functions(object), index=-1, length=funcs.length;while(++index < length) {var key=funcs[index];object[key] = createWrapper(object[key], 1, null, null, object);}return object;}function bindKey(object, key){return arguments.length > 2?createWrapper(key, 19, slice(arguments, 2), null, object):createWrapper(key, 3, null, null, object);}function compose(){var funcs=arguments, length=funcs.length;while(length--) {if(!isFunction(funcs[length])){throw new TypeError();}}return function(){var args=arguments, length=funcs.length;while(length--) {args = [funcs[length].apply(this, args)];}return args[0];};}function curry(func, arity){arity = typeof arity == "number"?arity:+arity || func.length;return createWrapper(func, 4, null, null, null, arity);}function debounce(func, wait, options){var args, maxTimeoutId, result, stamp, thisArg, timeoutId, trailingCall, lastCalled=0, maxWait=false, trailing=true;if(!isFunction(func)){throw new TypeError();}wait = nativeMax(0, wait) || 0;if(options === true){var leading=true;trailing = false;}else if(isObject(options)){leading = options.leading;maxWait = "maxWait" in options && (nativeMax(wait, options.maxWait) || 0);trailing = "trailing" in options?options.trailing:trailing;}var delayed=(function(_delayed){var _delayedWrapper=function delayed(){return _delayed.apply(this, arguments);};_delayedWrapper.toString = function(){return _delayed.toString();};return _delayedWrapper;})(function(){var remaining=wait - (now() - stamp);if(remaining <= 0){if(maxTimeoutId){clearTimeout(maxTimeoutId);}var isCalled=trailingCall;maxTimeoutId = timeoutId = trailingCall = undefined;if(isCalled){lastCalled = now();result = func.apply(thisArg, args);if(!timeoutId && !maxTimeoutId){args = thisArg = null;}}}else {timeoutId = setTimeout(delayed, remaining);}});var maxDelayed=function maxDelayed(){if(timeoutId){clearTimeout(timeoutId);}maxTimeoutId = timeoutId = trailingCall = undefined;if(trailing || maxWait !== wait){lastCalled = now();result = func.apply(thisArg, args);if(!timeoutId && !maxTimeoutId){args = thisArg = null;}}};return function(){args = arguments;stamp = now();thisArg = this;trailingCall = trailing && (timeoutId || !leading);if(maxWait === false){var leadingCall=leading && !timeoutId;}else {if(!maxTimeoutId && !leading){lastCalled = stamp;}var remaining=maxWait - (stamp - lastCalled), isCalled=remaining <= 0;if(isCalled){if(maxTimeoutId){maxTimeoutId = clearTimeout(maxTimeoutId);}lastCalled = stamp;result = func.apply(thisArg, args);}else if(!maxTimeoutId){maxTimeoutId = setTimeout(maxDelayed, remaining);}}if(isCalled && timeoutId){timeoutId = clearTimeout(timeoutId);}else if(!timeoutId && wait !== maxWait){timeoutId = setTimeout(delayed, wait);}if(leadingCall){isCalled = true;result = func.apply(thisArg, args);}if(isCalled && !timeoutId && !maxTimeoutId){args = thisArg = null;}return result;};}function defer(func){if(!isFunction(func)){throw new TypeError();}var args=slice(arguments, 1);return setTimeout(function(){func.apply(undefined, args);}, 1);}function delay(func, wait){if(!isFunction(func)){throw new TypeError();}var args=slice(arguments, 2);return setTimeout(function(){func.apply(undefined, args);}, wait);}function memoize(func, resolver){if(!isFunction(func)){throw new TypeError();}var memoized=(function(_memoized){var _memoizedWrapper=function memoized(){return _memoized.apply(this, arguments);};_memoizedWrapper.toString = function(){return _memoized.toString();};return _memoizedWrapper;})(function(){var cache=memoized.cache, key=resolver?resolver.apply(this, arguments):keyPrefix + arguments[0];return hasOwnProperty.call(cache, key)?cache[key]:cache[key] = func.apply(this, arguments);});memoized.cache = {};return memoized;}function once(func){var ran, result;if(!isFunction(func)){throw new TypeError();}return function(){if(ran){return result;}ran = true;result = func.apply(this, arguments);func = null;return result;};}function partial(func){return createWrapper(func, 16, slice(arguments, 1));}function partialRight(func){return createWrapper(func, 32, null, slice(arguments, 1));}function throttle(func, wait, options){var leading=true, trailing=true;if(!isFunction(func)){throw new TypeError();}if(options === false){leading = false;}else if(isObject(options)){leading = "leading" in options?options.leading:leading;trailing = "trailing" in options?options.trailing:trailing;}debounceOptions.leading = leading;debounceOptions.maxWait = wait;debounceOptions.trailing = trailing;return debounce(func, wait, debounceOptions);}function wrap(value, wrapper){return createWrapper(wrapper, 16, [value]);}function constant(value){return function(){return value;};}function createCallback(func, thisArg, argCount){var type=typeof func;if(func == null || type == "function"){return baseCreateCallback(func, thisArg, argCount);}if(type != "object"){return property(func);}var props=keys(func), key=props[0], a=func[key];if(props.length == 1 && a === a && !isObject(a)){return function(object){var b=object[key];return a === b && (a !== 0 || 1 / a == 1 / b);};}return function(object){var length=props.length, result=false;while(length--) {if(!(result = baseIsEqual(object[props[length]], func[props[length]], null, true))){break;}}return result;};}function escape(string){return string == null?"":String(string).replace(reUnescapedHtml, escapeHtmlChar);}function identity(value){return value;}function mixin(object, source, options){var chain=true, methodNames=source && functions(source);if(!source || !options && !methodNames.length){if(options == null){options = source;}ctor = lodashWrapper;source = object;object = lodash;methodNames = functions(source);}if(options === false){chain = false;}else if(isObject(options) && "chain" in options){chain = options.chain;}var ctor=object, isFunc=isFunction(ctor);forEach(methodNames, function(methodName){var func=object[methodName] = source[methodName];if(isFunc){ctor.prototype[methodName] = function(){var chainAll=this.__chain__, value=this.__wrapped__, args=[value];push.apply(args, arguments);var result=func.apply(object, args);if(chain || chainAll){if(value === result && isObject(result)){return this;}result = new ctor(result);result.__chain__ = chainAll;}return result;};}});}function noConflict(){context._ = oldDash;return this;}function noop(){}var now=isNative(now = Date.now) && now || function(){return new Date().getTime();};var parseInt=nativeParseInt(whitespace + "08") == 8?nativeParseInt:function(value, radix){return nativeParseInt(isString(value)?value.replace(reLeadingSpacesAndZeros, ""):value, radix || 0);};function property(key){return function(object){return object[key];};}function random(min, max, floating){var noMin=min == null, noMax=max == null;if(floating == null){if(typeof min == "boolean" && noMax){floating = min;min = 1;}else if(!noMax && typeof max == "boolean"){floating = max;noMax = true;}}if(noMin && noMax){max = 1;}min = +min || 0;if(noMax){max = min;min = 0;}else {max = +max || 0;}if(floating || min % 1 || max % 1){var rand=nativeRandom();return nativeMin(min + rand * (max - min + parseFloat("1e-" + ((rand + "").length - 1))), max);}return baseRandom(min, max);}function result(object, key){if(object){var value=object[key];return isFunction(value)?object[key]():value;}}function template(text, data, options){var settings=lodash.templateSettings;text = String(text || "");options = defaults({}, options, settings);var imports=defaults({}, options.imports, settings.imports), importsKeys=keys(imports), importsValues=values(imports);var isEvaluating, index=0, interpolate=options.interpolate || reNoMatch, source="__p += '";var reDelimiters=RegExp((options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate?reEsTemplate:reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$", "g");text.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset){interpolateValue || (interpolateValue = esTemplateValue);source += text.slice(index, offset).replace(reUnescapedString, escapeStringChar);if(escapeValue){source += "' +\n__e(" + escapeValue + ") +\n'";}if(evaluateValue){isEvaluating = true;source += "';\n" + evaluateValue + ";\n__p += '";}if(interpolateValue){source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";}index = offset + match.length;return match;});source += "';\n";var variable=options.variable, hasVariable=variable;if(!hasVariable){variable = "obj";source = "with (" + variable + ") {\n" + source + "\n}\n";}source = (isEvaluating?source.replace(reEmptyStringLeading, ""):source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");source = "function(" + variable + ") {\n" + (hasVariable?"":variable + " || (" + variable + " = {});\n") + "var __t, __p = '', __e = _.escape" + (isEvaluating?", __j = Array.prototype.join;\n" + "function print() { __p += __j.call(arguments, '') }\n":";\n") + source + "return __p\n}";var sourceURL="\n/*\n//# sourceURL=" + (options.sourceURL || "/lodash/template/source[" + templateCounter++ + "]") + "\n*/";try{var result=Function(importsKeys, "return " + source + sourceURL).apply(undefined, importsValues);}catch(e) {e.source = source;throw e;}if(data){return result(data);}result.source = source;return result;}function times(n, callback, thisArg){n = (n = +n) > -1?n:0;var index=-1, result=Array(n);callback = baseCreateCallback(callback, thisArg, 1);while(++index < n) {result[index] = callback(index);}return result;}function unescape(string){return string == null?"":String(string).replace(reEscapedHtml, unescapeHtmlChar);}function uniqueId(prefix){var id=++idCounter;return String(prefix == null?"":prefix) + id;}function chain(value){value = new lodashWrapper(value);value.__chain__ = true;return value;}function tap(value, interceptor){interceptor(value);return value;}function wrapperChain(){this.__chain__ = true;return this;}function wrapperToString(){return String(this.__wrapped__);}function wrapperValueOf(){return this.__wrapped__;}lodash.after = after;lodash.assign = assign;lodash.at = at;lodash.bind = bind;lodash.bindAll = bindAll;lodash.bindKey = bindKey;lodash.chain = chain;lodash.compact = compact;lodash.compose = compose;lodash.constant = constant;lodash.countBy = countBy;lodash.create = create;lodash.createCallback = createCallback;lodash.curry = curry;lodash.debounce = debounce;lodash.defaults = defaults;lodash.defer = defer;lodash.delay = delay;lodash.difference = difference;lodash.filter = filter;lodash.flatten = flatten;lodash.forEach = forEach;lodash.forEachRight = forEachRight;lodash.forIn = forIn;lodash.forInRight = forInRight;lodash.forOwn = forOwn;lodash.forOwnRight = forOwnRight;lodash.functions = functions;lodash.groupBy = groupBy;lodash.indexBy = indexBy;lodash.initial = initial;lodash.intersection = intersection;lodash.invert = invert;lodash.invoke = invoke;lodash.keys = keys;lodash.map = map;lodash.mapValues = mapValues;lodash.max = max;lodash.memoize = memoize;lodash.merge = merge;lodash.min = min;lodash.omit = omit;lodash.once = once;lodash.pairs = pairs;lodash.partial = partial;lodash.partialRight = partialRight;lodash.pick = pick;lodash.pluck = pluck;lodash.property = property;lodash.pull = pull;lodash.range = range;lodash.reject = reject;lodash.remove = remove;lodash.rest = rest;lodash.shuffle = shuffle;lodash.sortBy = sortBy;lodash.tap = tap;lodash.throttle = throttle;lodash.times = times;lodash.toArray = toArray;lodash.transform = transform;lodash.union = union;lodash.uniq = uniq;lodash.values = values;lodash.where = where;lodash.without = without;lodash.wrap = wrap;lodash.xor = xor;lodash.zip = zip;lodash.zipObject = zipObject;lodash.collect = map;lodash.drop = rest;lodash.each = forEach;lodash.eachRight = forEachRight;lodash.extend = assign;lodash.methods = functions;lodash.object = zipObject;lodash.select = filter;lodash.tail = rest;lodash.unique = uniq;lodash.unzip = zip;mixin(lodash);lodash.clone = clone;lodash.cloneDeep = cloneDeep;lodash.contains = contains;lodash.escape = escape;lodash.every = every;lodash.find = find;lodash.findIndex = findIndex;lodash.findKey = findKey;lodash.findLast = findLast;lodash.findLastIndex = findLastIndex;lodash.findLastKey = findLastKey;lodash.has = has;lodash.identity = identity;lodash.indexOf = indexOf;lodash.isArguments = isArguments;lodash.isArray = isArray;lodash.isBoolean = isBoolean;lodash.isDate = isDate;lodash.isElement = isElement;lodash.isEmpty = isEmpty;lodash.isEqual = isEqual;lodash.isFinite = isFinite;lodash.isFunction = isFunction;lodash.isNaN = isNaN;lodash.isNull = isNull;lodash.isNumber = isNumber;lodash.isObject = isObject;lodash.isPlainObject = isPlainObject;lodash.isRegExp = isRegExp;lodash.isString = isString;lodash.isUndefined = isUndefined;lodash.lastIndexOf = lastIndexOf;lodash.mixin = mixin;lodash.noConflict = noConflict;lodash.noop = noop;lodash.now = now;lodash.parseInt = parseInt;lodash.random = random;lodash.reduce = reduce;lodash.reduceRight = reduceRight;lodash.result = result;lodash.runInContext = runInContext;lodash.size = size;lodash.some = some;lodash.sortedIndex = sortedIndex;lodash.template = template;lodash.unescape = unescape;lodash.uniqueId = uniqueId;lodash.all = every;lodash.any = some;lodash.detect = find;lodash.findWhere = find;lodash.foldl = reduce;lodash.foldr = reduceRight;lodash.include = contains;lodash.inject = reduce;mixin((function(){var source={};forOwn(lodash, function(func, methodName){if(!lodash.prototype[methodName]){source[methodName] = func;}});return source;})(), false);lodash.first = first;lodash.last = last;lodash.sample = sample;lodash.take = first;lodash.head = first;forOwn(lodash, function(func, methodName){var callbackable=methodName !== "sample";if(!lodash.prototype[methodName]){lodash.prototype[methodName] = function(n, guard){var chainAll=this.__chain__, result=func(this.__wrapped__, n, guard);return !chainAll && (n == null || guard && !(callbackable && typeof n == "function"))?result:new lodashWrapper(result, chainAll);};}});lodash.VERSION = "2.4.1";lodash.prototype.chain = wrapperChain;lodash.prototype.toString = wrapperToString;lodash.prototype.value = wrapperValueOf;lodash.prototype.valueOf = wrapperValueOf;forEach(["join", "pop", "shift"], function(methodName){var func=arrayRef[methodName];lodash.prototype[methodName] = function(){var chainAll=this.__chain__, result=func.apply(this.__wrapped__, arguments);return chainAll?new lodashWrapper(result, chainAll):result;};});forEach(["push", "reverse", "sort", "unshift"], function(methodName){var func=arrayRef[methodName];lodash.prototype[methodName] = function(){func.apply(this.__wrapped__, arguments);return this;};});forEach(["concat", "slice", "splice"], function(methodName){var func=arrayRef[methodName];lodash.prototype[methodName] = function(){return new lodashWrapper(func.apply(this.__wrapped__, arguments), this.__chain__);};});return lodash;}var _=runInContext();if(typeof define == "function" && typeof define.amd == "object" && define.amd){root._ = _;define(function(){return _;});}else if(freeExports && freeModule){if(moduleExports){(freeModule.exports = _)._ = _;}else {freeExports._ = _;}}else {root._ = _;}}).call(undefined);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/zed/lib/app.js":[function(require,module,exports){
(function (global){
"use strict";

var _ = require("../externals/lodash");

var commands = require("./commands");
var engine = require("./engine");
var editor = require("./editor");
var storage = require("./storage");
var http = require("./http");
// import view module so that its globals are defined.
var view = require("./view");

var globals = require("./globals");

var exports = {};

exports.init = function () {
    commands.init();
    engine.init();
    editor.init();
    view.init();
    // Load a patch as an example.
    storage.loadPatch("http", "patches/main.zed");
    // Pollute the global with stuff to be used within patches.
    global.http = http;
    global._ = _;
};
exports.view = view;
exports.commands = commands;

// This module is to be used from the global namespace (i.e. from app.html).
global.app = exports;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../externals/lodash":"/home/zed/externals/lodash.js","./commands":"/home/zed/lib/commands.js","./editor":"/home/zed/lib/editor.js","./engine":"/home/zed/lib/engine.js","./globals":"/home/zed/lib/globals.js","./http":"/home/zed/lib/http.js","./storage":"/home/zed/lib/storage.js","./view":"/home/zed/lib/view.js"}],"/home/zed/lib/commands.js":[function(require,module,exports){
/*global Mousetrap */

"use strict";

var storage = require("./storage");
var editor = require("./editor");
var terminal = require("./terminal");
var utils = require("./utils");

var commands = {};

commands.prev = editor.offsetCurrent.bind(null, -1);
commands.next = editor.offsetCurrent.bind(null, 1);
commands.add = editor.add;
commands.remove = editor.remove;
commands.inputs = editor.port.bind(null, "input");
commands.outputs = editor.port.bind(null, "output");
commands.linkFromInput = editor.linkFromInput;
commands.linkFromOutput = editor.linkFromOutput;
commands.block = editor.block;
commands.fire = editor.fire;
commands.set = editor.set;
commands.move = editor.move;
commands.offset = editor.moveBy;
commands.clear = editor.clearAll;
commands.toggleMenu = function () {
    document.body.classList.toggle("menu-hidden");
};

var editBlock = function editBlock(block) {
    Mousetrap.reset();
    Mousetrap.bind("esc", commands.escape);
    block.content.focus();
    block.content.editing = true;
};
commands.editBlock = editBlock;

commands.edit = function () {
    if (editor.context === "block") {
        var block = editor.getCurrentBlock();
        editBlock(block);
        editor.stopBlinking();
        // Prevent default when this function is used with Moustrap.
        return false;
    }
};

commands.addButton = commands.add.bind(null, "html", "button", "go", 0, 1, undefined, undefined);
commands.addScript = commands.add.bind(null, "html", "script", "in1 + 2", 1, 1, undefined, undefined);
commands.addText = commands.add.bind(null, "html", "span", "empty", 1, 1, undefined, undefined);
commands.addNumber = commands.add.bind(null, "zed", "number", "42", 1, 1, undefined, undefined);
commands.addComment = commands.add.bind(null, "html", "comment", "Comment", 0, 0, undefined, undefined);
var bindKeysForMainMode = function bindKeysForMainMode() {
    Mousetrap.reset();
    Mousetrap.bind("K", commands.offset.bind(null, 0, -10));
    Mousetrap.bind("J", commands.offset.bind(null, 0, 10));
    Mousetrap.bind("H", commands.offset.bind(null, -10, 0));
    Mousetrap.bind("L", commands.offset.bind(null, 10, 0));
    Mousetrap.bind("k", commands.prev);
    Mousetrap.bind("j", commands.next);
    Mousetrap.bind("a n", commands.add.bind(null, "New"));
    Mousetrap.bind("a h b", commands.addButton);
    Mousetrap.bind("a h s", commands.addScript);
    Mousetrap.bind("a h t", commands.addText);
    Mousetrap.bind("a h n", commands.addNumber);
    Mousetrap.bind("a h c", commands.addComment);
    Mousetrap.bind("r", commands.remove);
    Mousetrap.bind("del", commands.remove);
    Mousetrap.bind("I", commands.inputs);
    Mousetrap.bind("O", commands.outputs);
    Mousetrap.bind("i", commands.linkFromInput);
    Mousetrap.bind("o", commands.linkFromOutput);
    Mousetrap.bind("b", commands.block);
    Mousetrap.bind("c", commands.goToCommandLine);
    Mousetrap.bind("C", commands.clear);
    Mousetrap.bind("l", commands.link);
    Mousetrap.bind("g", commands.goToBlock);
    Mousetrap.bind("e", commands.edit);
    Mousetrap.bind("space", commands.fire);
    Mousetrap.bind("m", commands.toggleMenu);
};
commands.bindKeysForMainMode = bindKeysForMainMode;

commands.escape = function () {
    if (editor.context === "block") {
        var currentlyEditingElement = utils.dom.getSelectionStart();
        if (currentlyEditingElement !== null) {
            currentlyEditingElement.blur();
            editor.startBlinking();
            currentlyEditingElement.editing = false;
        }
        bindKeysForMainMode();
    }
};

var switchDeemphasisAllBlocks = function switchDeemphasisAllBlocks() {
    var blocks = document.querySelectorAll("z-block");
    [].forEach.call(blocks, function (b) {
        b.classList.toggle("de-emphasis");
    });
};

var hideAllKeys = function hideAllKeys(selector) {
    var elements = document.querySelectorAll(selector);
    [].forEach.call(elements, function (element) {
        element.hideKey();
    });
    switchDeemphasisAllBlocks();
};

var firstPort;
var selectPort = function selectPort(port) {
    if (firstPort === undefined) {
        firstPort = port;
    } else {
        if (port.connectable(port, firstPort)) {
            port.connect(port, firstPort);
            firstPort = undefined;
            hideAllKeys("z-port");
            bindKeysForMainMode();
        }
    }
};

var portToLinkTo;
commands.link = function () {
    if (editor.context === "block") {
        var keys = utils.createKeysGenerator();
        firstPort = undefined;
        Mousetrap.reset();
        var ports = document.querySelectorAll("z-port");
        [].forEach.call(ports, function (zePort) {
            var key = keys.next();
            zePort.key = key;
            zePort.showKey();
            // Convert 'aae' into 'a a e'.
            key = key.split("").join(" ");
            Mousetrap.bind(key, selectPort.bind(null, zePort));
        });
        Mousetrap.bind("esc", function () {
            bindKeysForMainMode();
            hideAllKeys("z-port");
        });
        switchDeemphasisAllBlocks();
    } else {
        var port = editor.getCurrentPort();
        if (port !== null) {
            if (portToLinkTo === undefined) {
                portToLinkTo = port;
                portToLinkTo.classList.toggle("to-link-to");
            } else if (port.connectable(port, portToLinkTo)) {
                port.connect(port, portToLinkTo);
                portToLinkTo.classList.toggle("to-link-to");
                portToLinkTo = undefined;
            } else {
                portToLinkTo.classList.toggle("to-link-to");
                portToLinkTo = port;
                portToLinkTo.classList.toggle("to-link-to");
            }
        }
    }
};

var setCurrentBlockAndBackToMainMode = function setCurrentBlockAndBackToMainMode(block) {
    editor.setCurrentBlock(block);
    hideAllKeys("z-block");
    bindKeysForMainMode();
};

commands.goToBlock = function () {
    Mousetrap.reset();
    var blocks = document.querySelectorAll("z-block");
    var index = 0;
    var keys = utils.createKeysGenerator();
    [].forEach.call(blocks, function (block) {
        var key = keys.next();
        block.key = key;
        block.showKey();
        // Convert 'aae' into 'a a e'.
        key = key.split("").join(" ");
        Mousetrap.bind(key, setCurrentBlockAndBackToMainMode.bind(null, block));
        index++;
    });
    Mousetrap.bind("esc", function () {
        hideAllKeys("z-block");
        bindKeysForMainMode();
    });
    switchDeemphasisAllBlocks();
};

// Set a new stopCallback for Moustrap to avoid stopping when we start
// editing a contenteditable, so that we can use escape to leave editing.
Mousetrap.stopCallback = function (e, element) {
    // if the element has the class "mousetrap" then no need to stop
    if ((" " + element.className + " ").indexOf(" mousetrap ") > -1) {
        return false;
    }

    // stop for input, select, and textarea
    return element.tagName === "INPUT" || element.tagName === "SELECT" || element.tagName === "TEXTAREA";
};

commands.save = storage.savePatch;
commands.load = storage.loadPatch;
commands.rm = storage.removePatch;
commands.list = storage.getPatchNames;
commands.ls = storage.getPatchNames;

var terminalOnblur = function terminalOnblur() {
    bindKeysForMainMode();
    editor.startBlinking();
};

var term;
var init = function init() {
    bindKeysForMainMode();
    term = terminal.create(commands, terminalOnblur);
    // Unplug the init function so that it won't be used as a command from the
    // terminal.
    delete commands.init;
};
commands.init = init;

commands.goToCommandLine = function () {
    term.focus();
    Mousetrap.reset();
    editor.stopBlinking();
};

// TODO create a term.write(multiLineString) and use it.
commands.help = function (subject) {
    if (subject === undefined) {
        term.term.write("Press Esc to leave the command line and go back to normal mode.");
        term.term.newLine();
        term.term.newLine();
        term.term.write("Commands: next, prev, remove, add, set content, move, offset");
        term.term.newLine();
        term.term.write("ls, load, save, clear and rm.");
    } else if (subject === "add") {
        term.term.write("Add a new block just below the current block.");
        term.term.newLine();
        term.term.newLine();
        term.term.write("add html <what> <content> <nb inputs> <nb outputs>");
        term.term.newLine();
        term.term.write("  <what>    is either \"button\", \"script\", \"text\", \"number\" or a HTML tag.");
        term.term.newLine();
        term.term.write("  <content> is the content of the block (i.e. the button name, the");
        term.term.newLine();
        term.term.write("            script code, the text or number value, etc.).");
    } else {
        term.term.write("No help for \"" + subject + "\".");
    }
};

commands.message = function (string) {
    document.querySelector("#message").innerHTML = string;
};

module.exports = commands;

},{"./editor":"/home/zed/lib/editor.js","./storage":"/home/zed/lib/storage.js","./terminal":"/home/zed/lib/terminal.js","./utils":"/home/zed/lib/utils.js"}],"/home/zed/lib/editor.js":[function(require,module,exports){
"use strict";

"dduse strict";

var _ = require("../externals/lodash");

var engine = require("./engine");
var utils = require("./utils");

var editor = {};

editor.context = "block";

editor.getCurrentBlock = function () {
    return document.querySelector("z-block.current");
};

editor.getPreviousCurrentBlock = function () {
    return document.querySelector("z-block.previous-current");
};

editor.getCurrentPort = function () {
    return document.querySelector("z-port.current");
};

editor.setCurrentBlock = function (block) {
    var current = editor.getCurrentBlock();
    block.classList.toggle("current");
    var message = "";
    if (block.error !== undefined) {
        message = block.error.message;
    }
    // TODO Here we use global instead of require('commands') because of cyclic
    // dependencies.
    window.app.commands.message(message);
    if (current !== null) {
        current.classList.toggle("current");
        var previous = editor.getPreviousCurrentBlock();
        if (previous !== null) {
            previous.classList.toggle("previous-current");
        }
        current.classList.toggle("previous-current");
    }
};
// TODO not in the window namespace
window.setCurrentBlock = editor.setCurrentBlock;

editor.setCurrentPort = function (port) {
    var current = editor.getCurrentPort();
    port.classList.toggle("current");
    if (current !== null) {
        current.classList.toggle("current");
    }
};

editor.offsetCurrentBlock = function (offset) {
    var elements = document.querySelectorAll("z-block");
    var current = editor.getCurrentBlock();
    for (var i = 0; i < elements.length; i++) {
        if (elements[i] === current) {
            var index = (elements.length + i + offset) % elements.length;
            editor.setCurrentBlock(elements[index]);
        }
    }
};

editor.offsetCurrentPort = function (offset) {
    var current = editor.getCurrentPort();
    var elements = current.block.querySelectorAll("z-port." + editor.context);
    for (var i = 0; i < elements.length; i++) {
        if (elements[i] === current) {
            var index = (elements.length + i + offset) % elements.length;
            editor.setCurrentPort(elements[index]);
        }
    }
};

editor.offsetCurrent = function (offset) {
    if (editor.context === "block") {
        editor.offsetCurrentBlock(offset);
    } else if (editor.context === "input" || editor.context === "output") {
        editor.offsetCurrentPort(offset);
    }
};

editor.createBlockElement = function (content, nInputs, nOutputs, top, left) {
    var patch = document.querySelector("#patch");
    content = ["<z-port class=\"input\"></z-port>".repeat(nInputs), content, "<z-port class=\"output\"></z-port>".repeat(nOutputs)].join("");
    var htmlString = "<z-block>" + content + "</z-block>";
    var fragment = utils.dom.createFragment(htmlString);
    var block = fragment.querySelector("z-block");

    var defaultTop = 100;
    var defaultLeft = patch.getBoundingClientRect().width / 3;
    var currentBlock = editor.getCurrentBlock();
    if (currentBlock !== null) {
        var currentPosition = utils.dom.getPosition(currentBlock, currentBlock.parentNode);
        var offset = 23;
        defaultTop = currentPosition.y + currentBlock.getBoundingClientRect().height + offset;
        defaultLeft = currentPosition.x;
    }
    block.style.top = top || defaultTop + "px";
    block.style.left = left || defaultLeft + "px";

    editor.setCurrentBlock(block);
    patch.appendChild(fragment);
    return block;
};

editor.addBlock = function (type) {
    var args = arguments;
    var zeClass = "";
    if (args[1] === "number") {
        type = "html";
        args[1] = "span";
        zeClass = "zed-number";
    }
    var blockClass = args[1];
    if (type === "html") {
        var tagName = args[1];
        if (args[1] === "comment") {
            tagName = "span";
        }
        var content = args[2];
        var newContent = "\n            <" + tagName + "\n                class=\"ze-content " + zeClass + "\"\n                contenteditable\n            >" + content + "</" + tagName + ">\n        ";
        if (tagName === "script") {
            newContent = "\n                <script\n                    class=\"ze-content\"\n                    type=\"application/x-prevent-script-execution-onload\"\n                    style=\"display: block;white-space: pre-wrap;\"\n                    contenteditable\n                    spellcheck=false\n                    oninput=\"compileScript(this)\"\n                >" + content + "</script>\n            ";
        }
        if (tagName === "button") {
            newContent = "\n                <button\n                    onclick=\"if (!this.editing) {sendEventToOutputPort(this);}\"\n                    onblur=\"this.editing=false;\"\n                    class=\"ze-content\"\n                    spellcheck=false\n                    contenteditable\n                >" + content + "</button>\n            ";
        }
        if (tagName[0] === "<") {
            // Actually tagName contains a HTML string.
            newContent = tagName;
            blockClass = "";
        }
        args = Array.prototype.slice.call(args, 2);
        args[0] = newContent;
    }
    var block = editor.createBlockElement.apply(null, args);
    if (blockClass !== "") {
        block.classList.toggle(blockClass);
    }
};

editor.add = function () {
    var current;
    var port;
    if (editor.context === "block") {
        editor.addBlock.apply(null, arguments);
    } else if (editor.context === "input") {
        current = document.querySelector("z-block.current-off-context");
        port = current.addPort("<z-port class=\"input\"></z-port>");
        editor.setCurrentPort(port);
    } else if (editor.context === "output") {
        current = document.querySelector("z-block.current-off-context");
        port = current.addPort("<z-port class=\"output\"></z-port>");
        editor.setCurrentPort(port);
    }
};

editor.remove = function () {
    var selected = document.querySelector(".selected");
    if (selected !== null && selected.tagName === "Z-LINK") {
        var link = selected;
        link.unconnect();
    } else if (editor.context === "block") {
        var block = editor.getCurrentBlock();
        editor.offsetCurrentBlock(1);
        block.unplug();
        block.parentNode.removeChild(block);
    } else if (editor.context === "input" || editor.context === "output") {
        var port = editor.getCurrentPort();
        editor.offsetCurrentPort(1);
        port.unplug();
        port.parentNode.removeChild(port);
    }
};

var switchCurrentOnOffContext = function switchCurrentOnOffContext(selector, onOrOff) {
    var className = "current";
    if (onOrOff === "on") {
        className += "-off-context";
    }
    var element = document.querySelector(selector + "." + className);
    if (element !== null) {
        element.classList.toggle("current-off-context");
        element.classList.toggle("current");
    }
    return element;
};

editor.port = function (inputOrOutput) {
    if (editor.context !== "block") {
        return;
    }
    var selector = "z-block.current * z-port." + inputOrOutput;
    var switchedPort = switchCurrentOnOffContext(selector, "on");
    if (switchedPort === null) {
        // Maybe there is no port that is current and off context. So set the
        // first port (if any) as current.
        var port = document.querySelector(selector);
        if (port !== null) {
            port.classList.toggle("current");
        }
    }
    switchCurrentOnOffContext("z-block", "off");
    editor.context = inputOrOutput;
};

editor.block = function () {
    editor.context = "block";
    switchCurrentOnOffContext("z-block", "on");
    try {
        switchCurrentOnOffContext("z-port.input", "off");
    } catch (e) {}
    try {
        switchCurrentOnOffContext("z-port.output", "off");
    } catch (e) {}
};

editor.fire = function () {
    if (editor.context === "block") {
        var block = editor.getCurrentBlock();
        var content = block.content;
        if (content.tagName === "BUTTON") {
            engine.sendEventToOutputPort(content);
        } else if (content.tagName === "SCRIPT") {
            engine.fireEvent2(block);
        }
        // In case this function is called as a result of an event (say, space
        // key press) we prevent default event behaviour (say scroll down for
        // space bar).
        return false;
    }
};

editor.set = function (target, value) {
    if (target === "content") {
        if (editor.context === "block") {
            var block = editor.getCurrentBlock();
            block.content.innerHTML = value;
        }
    }
};

editor.move = function (left, top) {
    var current = editor.getCurrentBlock();
    current.style.top = top + "px";
    current.style.left = left + "px";
    current.redraw();
};

editor.moveBy = function (leftOffset, topOffset) {
    var current = editor.getCurrentBlock();
    var top = Number(current.style.top.slice(0, -2)) + Number(topOffset);
    var left = Number(current.style.left.slice(0, -2)) + Number(leftOffset);
    editor.move(left, top);
};

editor.startBlinking = function () {
    var block = editor.getCurrentBlock();
    if (block !== null) {
        if (block.classList.contains("stop-blinking")) {
            block.classList.toggle("stop-blinking");
        }
    }
};

editor.stopBlinking = function () {
    var block = editor.getCurrentBlock();
    if (!block.classList.contains("stop-blinking")) {
        block.classList.toggle("stop-blinking");
    }
};

var blinkCursor = (function (_blinkCursor) {
    var _blinkCursorWrapper = function blinkCursor() {
        return _blinkCursor.apply(this, arguments);
    };

    _blinkCursorWrapper.toString = function () {
        return _blinkCursor.toString();
    };

    return _blinkCursorWrapper;
})(function () {
    var current = editor.getCurrentBlock();
    if (current !== null) {
        current.classList.toggle("cursor-displayed");
    }
    window.setTimeout(blinkCursor, 1000);
});

editor.init = function () {
    blinkCursor();
};

editor.clearAll = function () {
    var blocks = document.querySelectorAll("z-block");
    _.each(blocks, function (block) {
        block.unplug();
        block.parentNode.removeChild(block);
    });
    document.getElementById("presentation").innerHTML = "";
};

editor.linkBlocks = function (outputBlock, inputBlock) {
    var input = inputBlock.querySelector("z-port.input");
    var output = outputBlock.querySelector("z-port.output");
    if (input !== null && output !== null) {
        if (input.connectable(input, output)) {
            input.connect(input, output);
        }
    }
};

editor.linkFromInput = function () {
    var outputBlock = editor.getPreviousCurrentBlock();
    var inputBlock = editor.getCurrentBlock();
    editor.linkBlocks(outputBlock, inputBlock);
};

editor.linkFromOutput = function () {
    var outputBlock = editor.getCurrentBlock();
    var inputBlock = editor.getPreviousCurrentBlock();
    editor.linkBlocks(outputBlock, inputBlock);
};

module.exports = editor;

},{"../externals/lodash":"/home/zed/externals/lodash.js","./engine":"/home/zed/lib/engine.js","./utils":"/home/zed/lib/utils.js"}],"/home/zed/lib/engine.js":[function(require,module,exports){
/*global getElementBlock */

"use strict";

var _ = require("../externals/lodash");

var utils = require("./utils");

var engine = {};

engine.compileScript = function (element) {
    var string = element.text;
    string = utils.getScripStringtWithNewlines(element);
    if (string.match(/^\..*/) !== null) {
        // If script starts with a dot, like ".top = 10", we prepend it with
        // "in1" variable name, i.e. "in1.top = 10".
        string = "in1" + string;
    }
    var script;
    var compiled;
    try {
        // In case script is an expression.
        var maybeExpression = string;
        script = "return (" + maybeExpression + ");";
        compiled = new Function("sendToOutput", "out1", "in1", "in2", "in3", "in4", "in5", script);
        element.compiledScript = compiled;
    } catch (e1) {
        // Compilation failed then it isn't an expression. Try as a
        // function body.
        try {
            script = string;
            compiled = new Function("sendToOutput", "out1", "in1", "in2", "in3", "in4", "in5", script);
            element.compiledScript = compiled;
        } catch (e) {
            // Not a function body, string is not valid.
            element.compiledScript = null;
        }
    }
};

engine.sendEventToOutputPort = function (element, value) {
    var block = getElementBlock(element);
    var ports = block.ports.outputs;
    if (ports) {
        if (ports.length === 1) {
            var port = ports[0];
            port.links.forEach(function (link) {
                engine.fireEvent(link, value);
            });
        } else {
            // Actually value is an array of values.
            var values = value;
            [].forEach.call(ports, function (zePort, index) {
                var zeValue = values[index];
                zePort.links.forEach(function (link) {
                    engine.fireEvent(link, zeValue);
                });
            });
        }
    }
};

var getOutputLinksFirstDestinationContent = function getOutputLinksFirstDestinationContent(element) {
    var block = getElementBlock(element);
    var port = block.ports.outputs[0];
    var content;
    if (port !== null) {
        var links = port.links;
        var link = links[0];
        if (link !== undefined) {
            var target = link.end.port.block;
            content = target.content;
        }
    }
    return content;
};

// TODO change name.
engine.fireEvent2 = function (target, value) {
    if (target.classList.contains("has-execution-error")) {
        target.classList.toggle("has-execution-error");
    }
    var content = target.content;
    var tagName = content.tagName;

    if (tagName === "SCRIPT") {
        var dataPorts = target.querySelectorAll("z-port.input");
        var inputs = [];
        [].forEach.call(dataPorts, function (dataPort) {
            var dataLinks = dataPort === null ? [] : dataPort.links;

            if (dataLinks.length !== 0) {
                if (value === undefined) {
                    var dataLink = _.find(dataLinks, function (link) {
                        var tag = link.begin.port.block.content.tagName;
                        return tag !== "BUTTON";
                    });

                    if (dataLink !== undefined) {
                        var obj = dataLink.begin.port.block.content;
                        value = obj.value;

                        if (obj.tagName === "SPAN") {
                            value = obj.innerHTML;
                            if (obj.classList.contains("zed-number")) {
                                value = Number(value);
                            }
                        } else if (obj.tagName === "SCRIPT") {
                            value = obj.executionResult;
                        }

                        if (value === undefined) {
                            value = obj;
                        }
                    }
                }
                inputs.push(value);
                value = undefined;
            }
        });

        var nextAction = function nextAction() {
            engine.sendEventToOutputPort(content, arguments[0]);
        };
        var firstDestinationContent = getOutputLinksFirstDestinationContent(content);

        var theScript = content.compiledScript;
        if (theScript === undefined) {
            engine.compileScript(content);
            theScript = content.compiledScript;
        }
        if (theScript === null) {
            //console.log('Error in script. Aborting.');
            return;
        }

        var args = [];
        args.push(nextAction);
        args.push(firstDestinationContent);
        args = args.concat(inputs);
        var result;
        target.error = {
            message: ""
        };
        try {
            result = theScript.apply(null, args);
        } catch (e) {
            target.classList.toggle("has-execution-error");
            var message = "execution error on line " + e.lineNumber + ": " + e.message;
            target.error.message = message;
            if (target.classList.contains("current")) {
                window.app.commands.message(message);
            }
            return;
        }

        if (result !== undefined) {
            // Store result for future use.
            content.executionResult = result;
            if (typeof result.then === "function") {
                result.then(function (data) {
                    engine.sendEventToOutputPort(content, data);
                });
            } else {
                engine.sendEventToOutputPort(content, result);
            }
        } else {
            engine.sendEventToOutputPort(content, result);
        }
    }

    if (tagName === "NUMBER") {
        if (value !== undefined) {
            content.innerHTML = value;
        }
    }

    if (tagName === "DIV" || tagName === "SPAN") {
        if (value !== undefined) {
            content.innerHTML = value;
        } else {
            value = content.innerHTML;
        }
        engine.sendEventToOutputPort(content, value);
    }

    if (tagName === "INPUT") {
        if (value !== undefined) {
            content.value = value;
        }
    }
    target.redraw();
};

engine.fireEvent = function (link, value) {
    var target = link.end.port.block;
    if (target.ports.inputs[0] === link.end.port) {
        // Only actually fire the block on its first input port.
        engine.fireEvent2(target, value);
    }
};

engine.init = function () {
    window.compileScript = engine.compileScript;
    window.sendEventToOutputPort = engine.sendEventToOutputPort;
    window.fireEvent2 = engine.fireEvent2;
    window.fireEvent = engine.fireEvent;
};

module.exports = engine;

},{"../externals/lodash":"/home/zed/externals/lodash.js","./utils":"/home/zed/lib/utils.js"}],"/home/zed/lib/globals.js":[function(require,module,exports){
// The place to pollute global namespace.

"use strict";

window.loadScript = function (url) {
    var script = document.createElement("script");
    script.setAttribute("type", "text/javascript");
    script.setAttribute("src", url);
    document.body.appendChild(script);
    document.body.removeChild(script);
};

},{}],"/home/zed/lib/http.js":[function(require,module,exports){
"use strict";

var http = {};

http.get = function (url) {
    return new Promise(function (resolve, reject) {
        var request = new XMLHttpRequest();
        request.open("GET", url);

        request.onload = function () {
            if (request.status === 200) {
                var result;
                try {
                    result = JSON.parse(request.response);
                } catch (e) {
                    result = request.response;
                }
                resolve(result);
            } else {
                reject(request.statusText);
            }
        };

        request.onerror = function () {
            reject(new Error("Network error"));
        };

        request.send();
    });
};

module.exports = http;

},{}],"/home/zed/lib/selector.js":[function(require,module,exports){
(function (global){
"use strict";

var selector = {
    setSelectable: function setSelectable(element, withStopPropagation) {
        var zeSelector = this;
        element.addEventListener("click", function (event) {
            zeSelector.action(element);
            if (withStopPropagation !== undefined && withStopPropagation === true) {
                event.stopPropagation();
            }
        });
    },

    connectable: function connectable(element1, element2) {
        if (element1.connectable !== undefined) {
            return element1.connectable(element1, element2);
        }
        return false;
    },

    action: function action(element) {
        if (this.selected !== undefined) {
            if (this.connectable(this.selected, element)) {
                this.selected.connect(this.selected, element);
                this.selected.classList.toggle("selected");
                this.selected = undefined;
                return;
            }
            this.selected.classList.toggle("selected");
        }
        if (this.selected === element) {
            this.selected = undefined;
        } else {
            this.selected = element;
            element.classList.toggle("selected");
        }
    },

    unselect: function unselect() {
        if (this.selected !== undefined) {
            this.selected.classList.toggle("selected");
            this.selected = undefined;
        }
    }

};

module.exports = selector;
// TODO move elsewhere
global.selector = selector;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"/home/zed/lib/storage.js":[function(require,module,exports){
"use strict";

var _ = require("../externals/lodash");

var editor = require("./editor");
var view = require("./view");
var utils = require("./utils");
var http = require("./http");

var storage = {};

function exportPatch() {
    view.switchMode("edit");
    var elements = document.querySelectorAll("z-block");
    var patch = {};
    patch.blocks = [];
    patch.links = [];
    _.each(elements, function (element, index) {
        var contentContainerInnerHTML = element.querySelector(".content-container").innerHTML.trim();
        var content = element.content;
        var tagName = content.tagName.toLowerCase();
        if (element.classList.contains("comment")) {
            tagName = "comment";
        }
        var value = content.value || content.innerHTML || "";
        if (tagName === "button") {
            value = content.innerHTML;
            contentContainerInnerHTML = "";
        } else if (tagName === "script") {
            value = utils.getScripStringtWithNewlines(content);
            contentContainerInnerHTML = "";
        }
        var inputPorts = element.querySelectorAll("z-port.input");
        var outputPorts = element.querySelectorAll("z-port.output");
        patch.blocks.push({
            id: index,
            tagName: tagName,
            nInputs: inputPorts.length,
            nOutputs: outputPorts.length,
            top: element.style.top,
            left: element.style.left,
            width: element.style.width,
            value: value,
            innerHTML: contentContainerInnerHTML
        });
        var phantom = content.phantomedBy;
        if (phantom !== undefined) {
            phantom.setAttribute("data-index-to-phantom", index);
        }
        _.each(inputPorts, function (port, portIndex) {
            var inLinks = port.links;
            _.each(inLinks, function (link) {
                var otherPort = link.begin.port;
                var otherBlock = otherPort.block;
                var otherBlockIndex = _.indexOf(elements, otherBlock);
                var otherBlockPorts = otherBlock.querySelectorAll("z-port.output");
                var otherBlockPortIndex = _.indexOf(otherBlockPorts, otherPort);
                patch.links.push({
                    input: {
                        block: index,
                        port: portIndex
                    },
                    output: {
                        block: otherBlockIndex,
                        port: otherBlockPortIndex
                    }
                });
            });
        });
    });
    patch.presentation = {};
    patch.presentation.innerHTML = document.getElementById("presentation").innerHTML;
    var phantoms = document.getElementById("presentation").querySelectorAll(".phantom");
    _.each(phantoms, function (phantom) {
        // FIXME data-index-to-phantom instead?
        phantom.removeAttribute("data-phantomed-block-id");
    });
    return patch;
}

// TODO move elsewhere
var connectBlocks = (function (_connectBlocks) {
    var _connectBlocksWrapper = function connectBlocks(_x, _x2, _x3, _x4) {
        return _connectBlocks.apply(this, arguments);
    };

    _connectBlocksWrapper.toString = function () {
        return _connectBlocks.toString();
    };

    return _connectBlocksWrapper;
})(function (end, start, inputPortPosition, outputPortPosition) {
    var startPort = start.querySelectorAll("z-port.output")[outputPortPosition];
    var endPort = end.querySelectorAll("z-port.input")[inputPortPosition];
    if (startPort.connectable === undefined) {
        // TODO connectable takes some time to be defined. Wait for it.
        window.setTimeout(connectBlocks, 1, end, start, inputPortPosition, outputPortPosition);
    } else if (startPort.connectable(startPort, endPort)) {
        startPort.connect(startPort, endPort);
    }
});

// TODO move elsewhere
var createPhantomLinkForBlock = (function (_createPhantomLinkForBlock) {
    var _createPhantomLinkForBlockWrapper = function createPhantomLinkForBlock(_x, _x2) {
        return _createPhantomLinkForBlock.apply(this, arguments);
    };

    _createPhantomLinkForBlockWrapper.toString = function () {
        return _createPhantomLinkForBlock.toString();
    };

    return _createPhantomLinkForBlockWrapper;
})(function (block, phantom) {
    var content = block.content;
    if (content === undefined) {
        // FIX ME wait that content actually exists.
        window.setTimeout(createPhantomLinkForBlock, 1, block, phantom);
    } else {
        view.createPhantomLink(content, phantom);
    }
});

var importPatch = function importPatch(patch) {
    var elements = [];
    _.each(patch.blocks, function (block) {
        block.nInputs = block.nInputs || 0;
        block.nOutputs = block.nOutputs || 0;
        if (block.tagName === "script" || block.tagName === "button" || block.tagName === "comment") {
            editor.addBlock("html", block.tagName, block.value, block.nInputs, block.nOutputs, block.top, block.left);
        } else {
            editor.addBlock("html", block.innerHTML, "", block.nInputs, block.nOutputs, block.top, block.left);
        }
        var element = document.querySelector("z-block.current");
        elements.push(element);
    });
    _.each(patch.links, function (link) {
        var output = elements[link.output.block];
        var input = elements[link.input.block];
        connectBlocks(input, output, link.input.port, link.output.port);
    });
    var presentation = document.getElementById("presentation");
    presentation.innerHTML = patch.presentation.innerHTML;
    var phantoms = document.getElementById("presentation").querySelectorAll(".phantom");
    _.each(phantoms, function (phantom) {
        var index = phantom.getAttribute("data-index-to-phantom");
        var block = elements[index];
        createPhantomLinkForBlock(block, phantom);
    });
};

storage.savePatch = function (where, name) {
    if (name === undefined) {
        // Only one argument means it is actually the name and we load from
        // localstorage.
        name = where;
        where = "local";
    }
    var patch = exportPatch();
    if (where === "local") {
        var patches = JSON.parse(window.localStorage.getItem("patches"));
        patches = patches || {};
        patches[name] = patch;
        window.localStorage.setItem("patches", JSON.stringify(patches));
    } else if (where === "file") {
        var content = JSON.stringify(patch, null, "    ");
        var blob = new Blob([content], { type: "text/plain", endings: "transparent" });
        window.saveAs(blob, name);
    } else {
        throw new Error("bad save location (\"" + where + "\"), must be \"local\" or \"file\"");
    }
};

storage.loadPatch = function (where, what) {
    if (what === undefined) {
        what = where;
        if (Object.prototype.toString.call(what) === "[object File]") {
            where = "file object";
        } else {
            where = "local";
        }
    }
    var promise;
    if (where === "local") {
        var patches = JSON.parse(window.localStorage.getItem("patches"));
        patches = patches || {};
        var patch = patches[what];
        promise = new Promise(function (resolve, reject) {
            if (patch !== undefined) {
                resolve(patch);
            } else {
                reject(new Error("No patch with name \"" + what + "\" in local storage."));
            }
        });
    } else if (where === "http") {
        var url = what;
        promise = http.get(url);
    } else if (where === "file object") {
        var file = what;
        promise = new Promise(function (resolve) {
            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                resolve(JSON.parse(event.target.result));
            };
            fileReader.readAsText(file);
        });
    } else {
        promise = new Promise(function (resolve, reject) {
            reject(new Error("bad load location (\"" + where + "\"), must be \"local\" or \"http\""));
        });
    }
    return promise.then(function (zePatch) {
        editor.clearAll();
        importPatch(zePatch);
    });
};

storage.removePatch = function (name) {
    var patches = JSON.parse(window.localStorage.getItem("patches"));
    patches = patches || {};
    var trash = JSON.parse(window.localStorage.getItem("trash"));
    trash = trash || {};
    var patch = patches[name];
    if (patch === undefined) {
        throw "No patch with name \"" + name + "\" in local storage.";
    }
    trash[name] = patch;
    delete patches[name];
    window.localStorage.setItem("patches", JSON.stringify(patches));
    editor.clearAll();
};

storage.getPatchNames = function () {
    var patches = JSON.parse(window.localStorage.getItem("patches"));
    return _.keys(patches);
};

module.exports = storage;

},{"../externals/lodash":"/home/zed/externals/lodash.js","./editor":"/home/zed/lib/editor.js","./http":"/home/zed/lib/http.js","./utils":"/home/zed/lib/utils.js","./view":"/home/zed/lib/view.js"}],"/home/zed/lib/terminal.js":[function(require,module,exports){
// Use of termlib.js for the terminal frame.

// globals from termlib.js
/*global TermGlobals */
/*global termKey */
/*global Parser */
/*global Terminal */

"use strict";

var terminal = {};

terminal.create = function (commands, onblur) {
    "use strict";

    var termDivId = "command-line-terminal-wrapper";

    var getTermDiv = function getTermDiv() {
        return document.querySelector("#" + termDivId);
    };

    var blur = function blur() {
        TermGlobals.keylock = true;
        TermGlobals.activeTerm.cursorOff();
        var termDiv = getTermDiv();
        termDiv.classList.toggle("focused");
        onblur();
    };

    var ctrlHandler = function ctrlHandler() {
        if (this.inputChar === termKey.ESC) {
            blur();
        }
    };

    var termHandler = function termHandler() {
        var that = this;
        that.newLine();
        var parser = new Parser();
        parser.parseLine(that);
        var commandName = that.argv[0];
        if (commands.hasOwnProperty(commandName)) {
            var args = that.argv.slice(1);
            try {
                var result = commands[commandName].apply(null, args);
                if (result !== undefined) {
                    if (result.then !== undefined) {
                        result.then(function (data) {
                            if (data !== undefined) {
                                that.write(data);
                            }
                            that.prompt();
                        })["catch"](function (error) {
                            that.write("Error: " + error.message);
                            that.prompt();
                        });
                    } else {
                        that.write(result);
                        that.prompt();
                    }
                } else {
                    that.prompt();
                }
            } catch (e) {
                that.write(e.message);
                that.prompt();
            }
        } else {
            that.write("unknown command \"" + commandName + "\".");
            that.prompt();
        }
    };

    var initHandler = function initHandler() {
        this.prompt();
    };

    // The termlib.js object
    var term = new Terminal({
        x: 0,
        y: 0,
        termDiv: termDivId,
        handler: termHandler,
        bgColor: "#f0f0f0",
        crsrBlinkMode: true,
        crsrBlockMode: false,
        rows: 10,
        frameWidth: 0,
        closeOnESC: false,
        ctrlHandler: ctrlHandler,
        initHandler: initHandler

    });
    term.open();

    var focus = function focus() {
        if (TermGlobals.keylock === false) {
            return;
        }
        TermGlobals.keylock = false;
        TermGlobals.activeTerm.cursorOn();
        var termDiv = getTermDiv();
        termDiv.classList.toggle("focused");
    };

    blur();

    return {
        focus: focus,
        term: term
    };
};

module.exports = terminal;

},{}],"/home/zed/lib/utils.js":[function(require,module,exports){
// Syntactic sugar and simple utilities.

"use strict";

var _ = require("../externals/lodash");

var utils = {};

var dom;
dom = {
    // Create a dom fragment from a HTML string.
    createFragment: function createFragment(htmlString) {
        var fragment = document.createDocumentFragment();
        if (htmlString) {
            var div = fragment.appendChild(document.createElement("div"));
            div.innerHTML = htmlString;
            var child;
            /*eslint-disable no-cond-assign */
            while (child = div.firstChild) {
                /*eslint-enable no-cond-assign */
                fragment.insertBefore(child, div);
            }
            fragment.removeChild(div);
        }
        return fragment;
    },

    // Move DOM nodes from a source to a target. The nodes ares selected
    // based on a selector and the place they are insterted is a given tag
    // with a "select" attribute which contains the given selector. If
    //    source is 'aaa <span class="something">zzz</span>'
    // and
    //    target is 'rrr <content select=".something"></content> ttt'
    // After moveContentBasedOnSelector(source, target, '.something'):
    //    source is 'aaa'
    // and
    //    target is 'rrr <span class="something">zzz</span> ttt'
    moveContentBasedOnSelector: function moveContentBasedOnSelector(source, target, selector, targetTag) {
        var content;
        var elements;
        if (selector === "") {
            content = target.querySelector(targetTag);
            elements = source.childNodes;
        } else {
            content = target.querySelector(targetTag + "[select=\"" + selector + "\"]");
            elements = source.querySelectorAll(selector);
        }
        // Warning: it is important to loop elements backward since current
        // element is removed at each step.
        for (var i = elements.length - 1; i >= 0; i--) {
            var element = elements[i];
            // TODO. Le "insert" ci-dessous sur les z-port fait que le
            // detachedCallback est appelé avec l'implementation de custom
            // elments par webreflections mais pas par l'implémentation de
            // Polymer (en utilisant le polyfill de Bosonic) ni avec
            // l'implémentation native de chrome.
            content.parentNode.insertBefore(element, content.nextSibling);
            // TODO move this elsewhere.
            if (element.onclick === null) {
                element.onclick = function () {
                    // Use global to access this function because using require
                    // on commands has a cyclic dependency.
                    window.app.commands.editBlock(source);
                };
            }
        }
        content.parentNode.removeChild(content);
    },

    move: function move(options) {
        return dom.moveContentBasedOnSelector(options.from, options.to, options.withSelector, options.onTag);
    },

    // Get the position of the element relative to another one (default is
    // document body).
    getPosition: function getPosition(element, relativeElement) {
        var rect = element.getBoundingClientRect();
        relativeElement = relativeElement || document.body;
        var relativeRect = relativeElement.getBoundingClientRect();
        return {
            x: rect.left - relativeRect.left,
            y: rect.top - relativeRect.top
        };
    },

    getSelectionStart: function getSelectionStart() {
        var node = document.getSelection().anchorNode;
        return node !== null && node.nodeType === 3 ? node.parentNode : node;
    }

};
utils.dom = dom;

// Usefull for multiline string definition without '\' or multiline
// concatenation with '+'.
utils.stringFromCommentInFunction = function (func) {
    return func.toString().match(/[^]*\/\*([^]*)\*\/\s*\}$/)[1];
};

utils.createKeysGenerator = function () {
    // Returns a keys generator for a sequence that is build like that:
    //   b, c, d...
    //   ab, ac, ad...
    //   aab, aac, aad...
    // The idea is to have a sequence where each value is not the beginning
    // of any other value (so single 'a' can't be part of the sequence).
    //
    // One goal is to have shortest possible keys. So maybe we should use
    // additionnal prefix chars along with 'a'. And because it will be used
    // for shortcuts, maybe we can choose chars based on their position on
    // the keyboard.
    var index = 0;
    var charCodes = _.range("b".charCodeAt(0), "z".charCodeAt(0) + 1);
    var idStrings = _.map(charCodes, function (charCode) {
        return String.fromCharCode(charCode);
    });
    var generator = {};
    generator.next = function () {
        var key = "";
        var i = index;
        if (i >= charCodes.length) {
            var r = Math.floor(i / charCodes.length);
            i = i % charCodes.length;
            while (r > 0) {
                key += "a";
                r--;
            }
        }
        key += idStrings[i];
        index++;
        return key;
    };

    return generator;
};

utils.getScripStringtWithNewlines = function (element) {
    // The newlines are lost when using raw innerHTML for script tags
    // (at least on firefox). So we parse each child to add a newline
    // when BR are encountered.
    var value = "";
    [].forEach.call(element.childNodes, function (node) {
        if (node.tagName === "BR") {
            value += "\n";
        } else {
            value += node.textContent;
        }
    });
    return value;
};

window.utils = utils;
module.exports = utils;

},{"../externals/lodash":"/home/zed/externals/lodash.js"}],"/home/zed/lib/view.js":[function(require,module,exports){
(function (global){
/*global Mousetrap */

"use strict";

var _ = require("../externals/lodash");

var commands = require("./commands");

var view = {};

var isDescendant = function isDescendant(child, parent) {
    var node = child.parentNode;
    while (node !== null) {
        if (node === parent) {
            return true;
        }
        node = node.parentNode;
    }
    return false;
};

var getPresentationElement = function getPresentationElement() {
    return document.getElementById("presentation");
};

var createPhantomLink = function createPhantomLink(phantomed, phantom) {
    phantom.phantomOf = phantomed;
    phantom.classList.add("phantom");
    phantomed.phantomedBy = phantom;
    phantomed.classList.add("phantomed");
};
view.createPhantomLink = createPhantomLink;

var createPhantom = function createPhantom(element) {
    var phantom = element.cloneNode(true);
    phantom.disabled = true;
    phantom.setAttribute("contentEditable", false);
    // Link the two for later use (in particulary when we will switch
    // display mode).
    createPhantomLink(element, phantom);

    return phantom;
};

var isCurrentSelectionInPresentation = function isCurrentSelectionInPresentation() {
    // Get the selection range (or cursor position)
    var range = window.getSelection().getRangeAt(0);
    var zePresentation = getPresentationElement();
    // Be sure the selection is in the presentation.
    return isDescendant(range.startContainer, zePresentation);
};

var insertInPlaceOfSelection = function insertInPlaceOfSelection(element) {
    // Get the selection range (or cursor position)
    var range = window.getSelection().getRangeAt(0);
    // Delete whatever is on the range
    range.deleteContents();
    range.insertNode(element);
};

// Insert a selected block in the DOM selection in presentation window.
var insertBlockContentInSelection = function insertBlockContentInSelection() {
    var block = document.querySelector("z-block.current");
    if (block === undefined) {
        // Nothing is selected.
        return;
    }

    if (isCurrentSelectionInPresentation()) {
        var content = block.content;
        var phantom = createPhantom(content);
        insertInPlaceOfSelection(phantom);

        // TODO eventually switch the two if we are in presentation mode.
    }
};
view.insertBlockContentInSelection = insertBlockContentInSelection;

var getPhantoms = function getPhantoms(element) {
    return element.querySelectorAll(".phantom");
};

var getWindowForMode = function getWindowForMode(mode) {
    var id = mode;
    return document.getElementById(id);
};

var swapElements = function swapElements(obj1, obj2) {
    // create marker element and insert it where obj1 is
    var temp = document.createElement("div");
    obj1.parentNode.insertBefore(temp, obj1);

    // move obj1 to right before obj2
    obj2.parentNode.insertBefore(obj1, obj2);

    // move obj2 to right before where obj1 used to be
    temp.parentNode.insertBefore(obj2, temp);

    // remove temporary marker node
    temp.parentNode.removeChild(temp);
};

var currentMode = "";

// Do all the stuff needed to switch mode between 'edit' and 'presentation'.
// Mainly swap 'phantom' and 'phantomed' objects pairs.
var switchMode = function switchMode(mode) {
    if (mode === currentMode) {
        return;
    }
    currentMode = mode;
    // By convention, the 'phantom' elements actually are in the window
    // associated to the mode we want to switch to. The phantomed one are in the
    // window of the other mode.

    var phantoms = getPhantoms(getWindowForMode(mode));
    _.each(phantoms, function (phantom) {
        // What this object is the phantom of?
        var phantomed = phantom.phantomOf;
        // Simply swap these DOM objects.
        swapElements(phantomed, phantom);
    });
};
view.switchMode = switchMode;

var presentation = {};

// TODO not used?
var selectElement = function selectElement(event) {
    presentation.selected = event.target;
};
view.selectElement = selectElement;

var lock = function lock() {
    var p = getPresentationElement();
    p.contentEditable = false;
    document.querySelector("#lock-button").disabled = true;
    document.querySelector("#unlock-button").disabled = false;
};
view.lock = lock;

var unlock = function unlock() {
    var p = getPresentationElement();
    p.contentEditable = true;
    document.querySelector("#lock-button").disabled = false;
    document.querySelector("#unlock-button").disabled = true;
};
view.unlock = unlock;

var init = function init() {
    var p = getPresentationElement();
    p.onfocus = function () {
        Mousetrap.reset();
    };
    p.onblur = function () {
        commands.bindKeysForMainMode();
    };
};
view.init = init;

module.exports = view;
global.view = view;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../externals/lodash":"/home/zed/externals/lodash.js","./commands":"/home/zed/lib/commands.js"}],"/home/zed/webcomponents/z-block.js":[function(require,module,exports){
/*global restyle */
/*global Draggabilly */

"use strict";

var utils = require("../lib/utils");
var selector = require("../lib/selector");

var tagName = "z-block";

var htmlTemplate = "\n    <div class=\"ports-container inputs\">\n        <content select=\"z-port.input\"></content>\n    </div>\n    <div id=\"main\">\n        <div class=\"content-container\">\n            <span class=\"block-key\">a</span>\n            <content></content>\n        </div>\n    </div>\n    <div class=\"ports-container outputs\">\n        <content select=\"z-port.output\"></content>\n    </div>\n";
var template = utils.dom.createFragment(htmlTemplate);

var cssAsJson = {
    // The following will apply to the root DOM element of the custom
    // element.
    "": {
        // By default custom elements are inline elements. Current element
        // has its own height and width and can be insterted in a text
        // flow. So we need a 'display: inline-block' style. Moreover, this
        // is needed as a workaround for a bug in Draggabilly (which only
        // works on block elements, not on inline ones).
        display: "inline-block",
        position: "absolute"
    },
    "#main": {
        background: "rgba(1, 1, 1, 0)",
        "border-left": "3px solid",
        "border-left-color": "rgba(1, 1, 1, 0)",
        "border-right": "3px solid",
        "border-right-color": "rgba(1, 1, 1, 0)"
    },
    ".content-container": {
        background: "#eee"
    },
    ".content-container > script": {
        padding: "4px 8px 2px 8px"
    },
    ".content-container > span": {
        padding: "4px 8px 2px 8px"
    },
    ".content-container > div": {
        padding: "4px 8px 2px 8px"
    },
    ".ports-container": {
        padding: 0,
        minHeight: 3,
        overflow: "visible"
    },
    ".ports-container z-port": {
        float: "left",
        marginLeft: 8,
        marginRight: 8
    },
    "span.block-key": {
        "font-size": 11,
        color: "#444",
        position: "absolute",
        bottom: 3,
        right: 3,
        "padding-right": 3,
        "padding-left": 3,
        background: "#fff"
    },
    "z-port.input .port-key": {
        top: -3
    },
    "z-port.output .port-key": {
        bottom: -3
    }
};
// Apply the css definition and prepending the custom element tag to all
// CSS selectors.
var style = restyle(tagName, cssAsJson);

var redraw = function redraw(block) {
    var ports = block.querySelectorAll("z-port");
    [].forEach.call(ports, function (port) {
        port.redraw();
    });
};

var makeItDraggable = function makeItDraggable(block) {
    var draggie = new Draggabilly(block, {
        containment: true
    });
    draggie.externalAnimate = function () {
        redraw(block);
    };
};

var properties = {
    createdCallback: { value: function value() {
            // At the beginning the light DOM is stored in the current element.
            var lightDom = this;
            // Start composed DOM with a copy of the template
            var composedDom = template.cloneNode(true);
            // Then progressively move elements from light to composed DOM based on
            // selectors on light DOM and fill <content> tags in composed DOM with
            // them.
            ["z-port.input", "z-port.output", ""].forEach(function (selector) {
                utils.dom.move({
                    from: lightDom, withSelector: selector,
                    to: composedDom, onTag: "content"
                });
            });
            // At this stage composed DOM is completed and light DOM is empty (i.e.
            // 'this' has no children). Composed DOM is set as the content of the
            // current element.
            this.appendChild(composedDom);

            this.hideKey();

            var that = this;
            var ports = that.querySelectorAll("z-port");
            [].forEach.call(ports, function (port) {
                port.block = that;
            });

            this.content = this.querySelector(".ze-content");

            // TODO move elsewhere
            this.onclick = function () {
                window.setCurrentBlock(that);
            };
            this.redraw = redraw.bind(null, this);
            selector.setSelectable(this, true);
        } },

    attachedCallback: { value: function value() {
            // TODO bug in chrome or in webreflection polyfill. If makeItDraggable
            // is called in createdCallback then Draggabily adds a
            // 'position:relative' because the css style of block that set
            // position to absolute has not been applied yet (with chrome). With
            // WebReflection's polyfill the style is applied so Draggabilly doesn't
            // change position. Why a different behaviour? Which is wrong ? Chrome,
            // webreflection or the spec? Maybe we can try with polymer polyfill.
            makeItDraggable(this);
        } },

    unplug: { value: function value() {
            var ports = this.querySelectorAll("z-port");
            [].forEach.call(ports, function (port) {
                port.unplug();
            });
        } },

    addPort: { value: function value(htmlString) {
            var fragment = utils.dom.createFragment(htmlString);
            var port = fragment.firstChild;
            port.block = this;
            if (port.classList.contains("input")) {
                var portContainer = this.querySelector(".ports-container.inputs");
                portContainer.appendChild(fragment);
            } else if (port.classList.contains("output")) {
                var portContainer = this.querySelector(".ports-container.outputs");
                portContainer.appendChild(fragment);
            }
            return port;
        } },

    keyElement: {
        get: function get() {
            return this.querySelector("span.block-key");
        }
    },

    key: {
        set: function set(value) {
            this.keyElement.innerHTML = value;
        }
    },

    showKey: { value: function value() {
            this.keyElement.style.visibility = "visible";
        } },

    hideKey: { value: function value() {
            this.keyElement.style.visibility = "hidden";
        } },

    ports: {
        get: function get() {
            return {
                out: this.querySelector("z-port.output"),
                inputs: this.querySelectorAll("z-port.input"),
                outputs: this.querySelectorAll("z-port.output")
            };
        }
    }
};

var proto = Object.create(HTMLElement.prototype, properties);
proto.css = style;
document.registerElement(tagName, { prototype: proto });

// TODO clean globals
window.getElementBlock = function (element) {
    // TODO do a search to find the first parent block for cases where
    // element is down in the element hiearchy.
    var maybeBlock = element.parentNode.parentNode.parentNode;
    var block;
    if (maybeBlock.tagName === "Z-BLOCK") {
        block = maybeBlock;
    } else {
        block = element.phantomedBy.parentNode.parentNode.parentNode;
    }
    return block;
};

},{"../lib/selector":"/home/zed/lib/selector.js","../lib/utils":"/home/zed/lib/utils.js"}],"/home/zed/webcomponents/z-link.js":[function(require,module,exports){
// Custom element to draw a link between two ports.

// We implement this as a div with zero height which width is the length of the
// line and use transforms to set its ends to the ports positions. Reference
// origin position is relative coordinates (0,0) and other end is (width,0).
// So be sure that CSS styling is done accordingly.

/*global getStyleProperty */

/*global restyle */

"use strict";

var utils = require("../lib/utils");
var selector = require("../lib/selector");
var _ = require("../externals/lodash");

var tagName = "z-link";

var htmlTemplate = "\n    <div>\n        <div class=\"selector\"></div>\n    </div>\n";
var template = utils.dom.createFragment(htmlTemplate);

var cssAsJson = {
    // The following will apply to the root DOM element of the custom
    // element.
    "": {
        position: "absolute",
        height: 1,
        background: "#aaa",
        boxShadow: "0px 0px 3px 0px #dfdfdf"
    },
    "div.selector": {
        position: "absolute",
        left: "10%",
        width: "80%",
        top: -7,
        height: 14,
        zIndex: 0,
        borderColor: "#333"
    }
};
// Apply the css definition and prepending the custom element tag to all
// CSS selectors.
var style = restyle(tagName, cssAsJson);

var getPolarCoordinates = function getPolarCoordinates(position1, position2) {
    var xDiff = position1.x - position2.x;
    var yDiff = position1.y - position2.y;

    return {
        mod: Math.sqrt(xDiff * xDiff + yDiff * yDiff),
        arg: Math.atan(yDiff / xDiff)
    };
};

// Set the style of a given element so that:
// * Its origin (i.e. 0,0 relative coordinates) is placed at one position.
// * Its width is set to the distance between the two positions.
// * It is rotated so that its end point (x = width and y = 0) is placed at
// the other position.
var transformProperty = getStyleProperty("transform");
var setElementEnds = function setElementEnds(element, end1, end2) {
    var origin;
    if (end1.x < end2.x) {
        origin = end1;
    } else {
        origin = end2;
    }

    var polar = getPolarCoordinates(end1, end2);
    var length = polar.mod;
    var angle = polar.arg;

    var top = origin.y + 0.5 * length * Math.sin(angle);
    var left = origin.x - 0.5 * length * (1 - Math.cos(angle));
    var parentPosition = utils.dom.getPosition(element.parentNode);
    left -= parentPosition.x;
    top -= parentPosition.y;

    element.style.width = length + "px";
    element.style.top = top + "px";
    element.style.left = left + "px";
    element.style[transformProperty] = "rotate(" + angle + "rad)";
};

var redraw = function redraw(zlink) {
    var end1 = zlink.begin.port;
    var end2 = zlink.end.port;
    if (end1 !== undefined && end2 !== undefined) {
        setElementEnds(zlink, end1.connectionPosition, end2.connectionPosition);
    }
};

var connect = function connect(zlink, plug, port) {
    if (typeof port === "string") {
        port = document.querySelector(port);
    }
    plug.port = port;
    plug.port.links.push(zlink);
};

var unconnect = function unconnect(zlink) {
    zlink.begin.port.links = _.without(zlink.begin.port.links, zlink);
    zlink.end.port.links = _.without(zlink.end.port.links, zlink);
    if (zlink.parentNode !== null) {
        zlink.parentNode.removeChild(zlink);
    }
};

var proto = Object.create(HTMLElement.prototype);
proto.createdCallback = function () {
    var composedDom = template.cloneNode(true);
    this.appendChild(composedDom);

    // Curried version of 'redraw' with current object instance.
    // Used for event listeners.
    this.redraw = redraw.bind(null, this);
    this.connect = connect.bind(null, this);
    this.unconnect = unconnect.bind(null, this);

    this.begin = {};
    this.end = {};
    if (this.hasAttribute("begin") && this.hasAttribute("end")) {
        // TODO do the same stuff on attributes' changes.
        connect(this, this.begin, this.getAttribute("begin"));
        connect(this, this.end, this.getAttribute("end"));

        this.redraw();
    }

    selector.setSelectable(this, true);
};

proto.css = style;
document.registerElement(tagName, { prototype: proto });

},{"../externals/lodash":"/home/zed/externals/lodash.js","../lib/selector":"/home/zed/lib/selector.js","../lib/utils":"/home/zed/lib/utils.js"}],"/home/zed/webcomponents/z-port.js":[function(require,module,exports){
/*global restyle */

"use strict";

var utils = require("../lib/utils");
var selector = require("../lib/selector");

var tagName = "z-port";

var htmlTemplate = "\n    <span class=\"port-key\">a</span>\n    <div class=\"selector\"></div>\n";
var template = utils.dom.createFragment(htmlTemplate);

var cssAsJson = {
    // The following will apply to the root DOM element of the custom
    // element.
    "": {
        width: 10,
        height: 2,
        background: "#ccc",
        display: "inline-block",
        position: "relative",
        overflow: "visible",
        zIndex: "5"
    },
    ".port-key": {
        "font-size": "0.7em",
        color: "#444",
        position: "absolute",
        "padding-left": 3,
        "padding-right": 3,
        zIndex: "10",
        background: "#fff"
    },
    ".selector": {
        position: "absolute",
        left: -8,
        top: -8,
        width: 24,
        height: 14
    }
};
// Apply the css definition and prepending the custom element tag to all
// CSS selectors.
var style = restyle(tagName, cssAsJson);

var redraw = function redraw(port) {
    [].forEach.call(port.links, function (link) {
        link.redraw();
    });
};

var properties = {

    createdCallback: { value: function value() {
            this.links = [];
            this.redraw = redraw.bind(null, this);
            selector.setSelectable(this, true);

            var composedDom = template.cloneNode(true);
            this.appendChild(composedDom);

            this.hideKey();
        } },

    unplug: { value: function value() {
            this.links.forEach(function (link) {
                link.unconnect();
            });
        } },

    connectable: { value: function value(port1, port2) {
            return port1.classList.contains("input") && port2.classList.contains("output") || port1.classList.contains("output") && port2.classList.contains("input");
        } },

    connect: { value: function value(port1, port2) {
            var link = document.createElement("z-link");
            if (port1.classList.contains("output")) {
                link.connect(link.begin, port1);
                link.connect(link.end, port2);
            } else {
                link.connect(link.end, port1);
                link.connect(link.begin, port2);
            }
            // TODO use another way to find where to add new links.
            var patch = document.querySelector("#patch");
            patch.appendChild(link);
            link.redraw();
        } },

    connectionPosition: {
        get: function get() {
            var element = this;
            var rect = element.getBoundingClientRect();
            var position = utils.dom.getPosition(element);
            var center = {
                x: position.x + rect.width / 2,
                y: position.y + rect.height / 2
            };
            return center;
        }
    },

    keyElement: {
        get: function get() {
            return this.querySelector("span.port-key");
        }
    },

    key: {
        set: function set(value) {
            this.keyElement.innerHTML = value;
        }
    },

    showKey: { value: function value() {
            this.keyElement.style.visibility = "visible";
        } },

    hideKey: { value: function value() {
            this.keyElement.style.visibility = "hidden";
        } }

};

var proto = Object.create(HTMLElement.prototype, properties);
proto.css = style;
document.registerElement(tagName, { prototype: proto });

},{"../lib/selector":"/home/zed/lib/selector.js","../lib/utils":"/home/zed/lib/utils.js"}]},{},["/home/zed/lib/app.js","/home/zed/webcomponents/z-block.js","/home/zed/webcomponents/z-link.js","/home/zed/webcomponents/z-port.js"])
//# sourceMappingURL=data:application/json;base64,
